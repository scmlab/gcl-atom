// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");

function markLineError(range, instance) {
  var marker = instance[/* editor */0].markBufferRange(range);
  var option = {
    type: "line",
    class: "marker-error"
  };
  var decoration = instance[/* editor */0].decorateMarker(marker, option);
  instance[/* decorations */3] = Rebase.$$Array.concat(instance[/* decorations */3], /* array */[decoration]);
  return /* () */0;
}

function markRangeError(range, instance) {
  var marker = instance[/* editor */0].markBufferRange(range);
  var option = {
    type: "highlight",
    class: "marker-error"
  };
  var decoration = instance[/* editor */0].decorateMarker(marker, option);
  instance[/* decorations */3] = Rebase.$$Array.concat(instance[/* decorations */3], /* array */[decoration]);
  return /* () */0;
}

function digHole(range, instance) {
  var start = range.start;
  var range$prime = new Atom.Range(start, new Atom.Point(0, 1).translate(start));
  instance[/* editor */0].setTextInBufferRange(range$prime, "{!\n\n!}");
  return Async$GclAtom.resolve(/* () */0);
}

function markSpec(spec, instance) {
  return markLineError(spec[3], instance);
}

exports.markLineError = markLineError;
exports.markRangeError = markRangeError;
exports.digHole = digHole;
exports.markSpec = markSpec;
/* atom Not a pure module */
