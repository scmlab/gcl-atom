// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Pred$GclAtom = require("./View/Pred.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");

function mark(type_, class_, range, instance) {
  var marker = instance[/* editor */0].markBufferRange(range);
  var option = {
    type: type_,
    class: class_
  };
  var decoration = instance[/* editor */0].decorateMarker(marker, option);
  instance[/* decorations */3] = Rebase.$$Array.concat(instance[/* decorations */3], /* array */[decoration]);
  return /* () */0;
}

function overlay(text, range, instance) {
  var element = document.createElement("div");
  element.innerHTML = text;
  element.classList.add("marker-spec-text");
  element.setAttribute("style", "left: 3ex");
  var range$prime = range.translate(new Atom.Point(-1, 0), new Atom.Point(-1, 0));
  var marker = instance[/* editor */0].markBufferRange(range$prime);
  var option = {
    type: "overlay",
    item: element,
    position: "head"
  };
  var decoration = instance[/* editor */0].decorateMarker(marker, option);
  instance[/* decorations */3] = Rebase.$$Array.concat(instance[/* decorations */3], /* array */[decoration]);
  return /* () */0;
}

function markLineError(param, param$1) {
  return mark("line", "marker-error", param, param$1);
}

function markLineSpecSoft(param, param$1) {
  return mark("highlight", "marker-spec-soft", param, param$1);
}

function markLineSpecHard(param, param$1) {
  return mark("highlight", "marker-spec-hard", param, param$1);
}

function highlightError(param, param$1) {
  return mark("highlight", "marker-error", param, param$1);
}

function digHole(range, instance) {
  var start = range.start;
  var range$prime = new Atom.Range(start, new Atom.Point(0, 1).translate(start));
  instance[/* editor */0].setTextInBufferRange(range$prime, "{!\n\n!}");
  return Async$GclAtom.resolve(/* () */0);
}

function markSpec(spec, instance) {
  var end_ = spec[4];
  var start = spec[3];
  if (spec[0]) {
    markLineSpecSoft(start, instance);
  } else {
    markLineSpecHard(start, instance);
  }
  overlay(Pred$GclAtom.toString(spec[1]), start, instance);
  overlay(Pred$GclAtom.toString(spec[2]), end_, instance);
  return markLineSpecSoft(end_, instance);
}

exports.mark = mark;
exports.overlay = overlay;
exports.markLineError = markLineError;
exports.markLineSpecSoft = markLineSpecSoft;
exports.markLineSpecHard = markLineSpecHard;
exports.highlightError = highlightError;
exports.digHole = digHole;
exports.markSpec = markSpec;
/* atom Not a pure module */
