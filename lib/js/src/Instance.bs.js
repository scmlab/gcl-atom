// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Ok$GclAtom = require("./Util/Ok.bs.js");
var Util$GclAtom = require("./Util.bs.js");
var View$GclAtom = require("./Editor/View.bs.js");
var Command$GclAtom = require("./Editor/Command.bs.js");
var Request$GclAtom = require("./GCL/Request.bs.js");
var Response$GclAtom = require("./GCL/Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications",
            "history"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            Connection$GclAtom.make(/* () */0),
            [],
            [],
            undefined
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function disconnect(instance) {
  Connection$GclAtom.disconnect(instance[/* connection */3]);
  return /* () */0;
}

function getConnection(instance) {
  var isConnected = Connection$GclAtom.isConnected(instance[/* connection */3]);
  if (isConnected) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [instance[/* connection */3]]));
  } else {
    return $$Promise.mapOk(Connection$GclAtom.connect(instance[/* connection */3]), (function (param) {
                  return instance[/* connection */3];
                }));
  }
}

function sendRequest(request, instance) {
  var value = Request$GclAtom.encode(request);
  console.log("=== Send ===");
  console.log("[ json ]", value);
  return Ok$GclAtom.let_(getConnection(instance), (function (conn) {
                return Ok$GclAtom.let_(Connection$GclAtom.send(value, conn), (function (result) {
                              console.log("=== Recieved ===");
                              console.log("[ json ]", result);
                              console.log("[ value ]", Response$GclAtom.decode(result));
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [Response$GclAtom.decode(result)]));
                            }));
              }));
}

var Connection_ = {
  disconnect: disconnect,
  getConnection: getConnection,
  sendRequest: sendRequest
};

function destroy$1(instance) {
  disconnect(instance);
  Response$GclAtom.Decoration.destroyAll(instance);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function runTasks(instance, tasks) {
  var runTask = function (param) {
    switch (param.tag | 0) {
      case /* WithInstance */0 :
          return $$Promise.flatMap(Curry._1(param[0], instance), (function (param) {
                        return runTasks(instance, param);
                      }));
      case /* DispatchRemote */1 :
          var command = param[0];
          instance[/* history */6] = command;
          return runTasks(instance, Command$GclAtom.Remote.dispatch(command));
      case /* DispatchLocal */2 :
          return runTasks(instance, Command$GclAtom.Local.dispatch(param[0]));
      case /* SendRequest */3 :
          return $$Promise.flatMap(sendRequest(param[0], instance), (function (param) {
                        if (param.tag) {
                          var match = Connection$GclAtom.$$Error.toString(param[0]);
                          displayError(match[0], match[1], instance);
                          return $$Promise.resolved(/* () */0);
                        } else {
                          return runTasks(instance, Response$GclAtom.handle(param[0]));
                        }
                      }));
      case /* Display */4 :
          Curry._1(instance[/* view */1][/* setHeader */1], param[0]);
          Curry._1(instance[/* view */1][/* setBody */2], param[1]);
          return $$Promise.resolved(/* () */0);
      
    }
  };
  return $$Promise.map(Util$GclAtom.$$Promise.each(Rebase.List.map(runTask, tasks)), (function (param) {
                return /* () */0;
              }));
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.View = View;
exports.Connection_ = Connection_;
exports.destroy = destroy$1;
exports.runTasks = runTasks;
/* Promise Not a pure module */
