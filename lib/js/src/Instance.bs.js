// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Async$GclAtom = require("./Util/Async.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  console.log("[ instance ][ construct ]", editor.getPath());
  atom.views.getView(editor).classList.add("gcl");
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "connection"
          ], [
            editor,
            Caml_chrome_debugger.record([
                "path",
                "process"
              ], [
                undefined,
                undefined
              ])
          ]);
}

function destroy(self) {
  console.log("[ instance ][ destroy ]", self[/* editor */0].getPath());
  atom.views.getView(self[/* editor */0]).classList.remove("gcl");
  return /* () */0;
}

function isConnected(self) {
  return self[/* connection */1][/* process */1] !== undefined;
}

function dispatch(command, self) {
  switch (command) {
    case /* Activate */0 :
        if (isConnected(self)) {
          return /* () */0;
        } else {
          return Async$GclAtom.finalError((function (error) {
                        console.log("[ connection error ]", Connection$GclAtom.$$Error.toString(error));
                        return /* () */0;
                      }), Async$GclAtom.thenOk((function (connection) {
                              self[/* connection */1] = connection;
                              console.log("[ connected ]");
                              return Async$GclAtom.resolve(/* () */0);
                            }))(Async$GclAtom.thenOk(Connection$GclAtom.make)(Connection$GclAtom.autoSearch("gcl"))));
        }
    case /* Deactivate */1 :
        self[/* connection */1] = Connection$GclAtom.disconnect(self[/* connection */1]);
        console.log("[ deactivate ]");
        return /* () */0;
    case /* Save */2 :
        console.log("[ saved ]");
        return Async$GclAtom.finalOk((function (result) {
                      console.log("[ received ]", result);
                      return /* () */0;
                    }), Async$GclAtom.thenOk((function (param) {
                            console.log("[ sending ]");
                            var filepath = self[/* editor */0].getPath();
                            if (filepath !== undefined) {
                              return Connection$GclAtom.send("{\"tag\": \"Load\", \"contents\": \"" + (filepath + "\"}"), self[/* connection */1]);
                            } else {
                              return Async$GclAtom.reject(/* () */0);
                            }
                          }))(Async$GclAtom.mapError((function (param) {
                                return /* () */0;
                              }))(Async$GclAtom.fromPromise(self[/* editor */0].save()))));
    
  }
}

function activate(param) {
  return /* () */0;
}

function deactivate(param) {
  return /* () */0;
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.destroy = destroy;
exports.isConnected = isConnected;
exports.dispatch = dispatch;
exports.activate = activate;
exports.deactivate = deactivate;
/* Connection-GclAtom Not a pure module */
