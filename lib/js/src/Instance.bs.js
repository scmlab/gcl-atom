// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var Spec$GclAtom = require("./Instance/Spec.bs.js");
var Type$GclAtom = require("./View/Type.bs.js");
var View$GclAtom = require("./View.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");
var Command$GclAtom = require("./Command.bs.js");
var Request$GclAtom = require("./Request.bs.js");
var Response$GclAtom = require("./Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Decoration$GclAtom = require("./Instance/Decoration.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications",
            "history"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            Connection$GclAtom.make(/* () */0),
            [],
            [],
            undefined
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function disconnect(instance) {
  Connection$GclAtom.disconnect(instance[/* connection */3]);
  return /* () */0;
}

function getConnection(instance) {
  var isConnected = Connection$GclAtom.isConnected(instance[/* connection */3]);
  if (isConnected) {
    return Async$GclAtom.resolve(instance[/* connection */3]);
  } else {
    return Async$GclAtom.thenOk((function (param) {
                    return Async$GclAtom.resolve(instance[/* connection */3]);
                  }))(Connection$GclAtom.connect(instance[/* connection */3]));
  }
}

function sendRequest(request, instance) {
  return Async$GclAtom.mapOk((function (result) {
                  console.log("=== Recieved ===");
                  console.log("[ json ]", result);
                  console.log("[ value ]", Response$GclAtom.decode(result));
                  return Response$GclAtom.decode(result);
                }))(Async$GclAtom.mapError((function (error) {
                      var match = Connection$GclAtom.$$Error.toString(error);
                      return displayError(match[0], match[1], instance);
                    }))(Async$GclAtom.thenOk((function (conn) {
                          var value = Request$GclAtom.encode(request);
                          console.log("=== Send ===");
                          console.log("[ json ]", value);
                          return Connection$GclAtom.send(value, conn);
                        }))(getConnection(instance))));
}

var Connection = {
  disconnect: disconnect,
  getConnection: getConnection,
  sendRequest: sendRequest
};

function destroy$1(instance) {
  disconnect(instance);
  Decoration$GclAtom.destroyAll(instance);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function handle(response) {
  var handleError = function (error) {
    var kind = error[1];
    var site = error[0];
    if (typeof kind === "number") {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                        return Decoration$GclAtom.markSite(site, param);
                      })]),
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* Display */Caml_chrome_debugger.variant("Display", 4, [
                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Lexical Error"]),
                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, [Curry._1(Response$GclAtom.$$Error.Site.toString, site)])
                      ]),
                    /* [] */0
                  ])
              ]);
    } else {
      switch (kind.tag | 0) {
        case /* SyntacticError */0 :
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                              return Decoration$GclAtom.markSite(site, param);
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 4, [
                              /* Error */Caml_chrome_debugger.variant("Error", 1, ["Parse Error"]),
                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, [kind[0]])
                            ]),
                          /* [] */0
                        ])
                    ]);
        case /* ConvertError */1 :
            var match = kind[0];
            if (typeof match === "number") {
              switch (match) {
                case /* MissingBound */0 :
                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                      return Decoration$GclAtom.markSite(site, param);
                                    })]),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Bound Missing"]),
                                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Bound missing at the end of the assertion before the DO construct \" , bnd : ... }\""])
                                    ]),
                                  /* [] */0
                                ])
                            ]);
                case /* MissingAssertion */1 :
                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                      return Decoration$GclAtom.markSite(site, param);
                                    })]),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Assertion Missing"]),
                                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Assertion before the DO construct is missing"])
                                    ]),
                                  /* [] */0
                                ])
                            ]);
                case /* ExcessBound */2 :
                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                      return Decoration$GclAtom.markSite(site, param);
                                    })]),
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Excess Bound"]),
                                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Unnecessary bound annotation at this assertion"])
                                    ]),
                                  /* [] */0
                                ])
                            ]);
                case /* MissingPostcondition */3 :
                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Postcondition Missing"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The last statement of the program should be an assertion"])
                                ]),
                              /* [] */0
                            ]);
                case /* DigHole */4 :
                    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                      console.log("dig!");
                                      return Async$GclAtom.thenOk((function (param) {
                                                      var match = instance[/* history */6];
                                                      if (match !== undefined && match.tag) {
                                                        console.log("!!");
                                                        return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 2, [/* Save */1]),
                                                                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                          /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 2, [/* Refine */2]),
                                                                          /* [] */0
                                                                        ])
                                                                    ]));
                                                      } else {
                                                        return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 2, [/* Save */1]),
                                                                      /* [] */0
                                                                    ]));
                                                      }
                                                    }))(Spec$GclAtom.digHole(site, instance));
                                    })]),
                              /* [] */0
                            ]);
                
              }
            } else {
              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 4, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["This should not have happened, please report this issue\n" + match[0]])
                          ]),
                        /* [] */0
                      ]);
            }
        case /* TypeError */2 :
            var match$1 = kind[0];
            switch (match$1.tag | 0) {
              case /* NotInScope */0 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                    return Decoration$GclAtom.markSite(site, param);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The definition " + (match$1[0] + " is not in scope")])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* UnifyFailed */1 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                    return Decoration$GclAtom.markSite(site, param);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Cannot unify: " + (Type$GclAtom.toString(match$1[0]) + ("\nwith        : " + Type$GclAtom.toString(match$1[1])))])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* RecursiveType */2 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                    return Decoration$GclAtom.markSite(site, param);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Recursive type variable: " + (Type$GclAtom.toString(/* Var */Caml_chrome_debugger.variant("Var", 3, [match$1[0]])) + ("\nin type             : " + Type$GclAtom.toString(match$1[1])))])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* NotFunction */3 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (param) {
                                    return Decoration$GclAtom.markSite(site, param);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The type " + (Type$GclAtom.toString(match$1[0]) + " is not a function type")])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              
            }
        
      }
    }
  };
  switch (response.tag | 0) {
    case /* Error */0 :
        return Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(handleError, response[0])));
    case /* OK */1 :
        var specifications = response[1];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Rebase.$$Array.forEach(Curry._2(Rebase.Fn.flip, Decoration$GclAtom.markSpec, instance), specifications);
                          instance[/* specifications */5] = specifications;
                          return Async$GclAtom.resolve(/* [] */0);
                        })]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Display */Caml_chrome_debugger.variant("Display", 4, [
                          /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Proof Obligations"]),
                          /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [response[0]])
                        ]),
                      /* [] */0
                    ])
                ]);
    case /* Resolve */2 :
        var i = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          return Async$GclAtom.thenOk((function (param) {
                                          return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 2, [/* Save */1]),
                                                        /* [] */0
                                                      ]));
                                        }))(Spec$GclAtom.resolve(i, instance));
                        })]),
                  /* [] */0
                ]);
    case /* UnknownResponse */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 4, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic: unknown response from GCL"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [JSON.stringify(response[0])])
                    ]),
                  /* [] */0
                ]);
    
  }
}

function runTasks(instance, tasks) {
  return Async$GclAtom.thenOk((function (param) {
                  return Async$GclAtom.resolve(/* () */0);
                }))(Async$GclAtom.each(Rebase.List.map((function (x, param) {
                        var param$1 = x;
                        switch (param$1.tag | 0) {
                          case /* WithInstance */0 :
                              return Async$GclAtom.thenOk((function (param) {
                                              return runTasks(instance, param);
                                            }))(Curry._1(param$1[0], instance));
                          case /* DispatchRemote */1 :
                              var command = param$1[0];
                              instance[/* history */6] = command;
                              return runTasks(instance, Command$GclAtom.Remote.dispatch(command));
                          case /* DispatchLocal */2 :
                              return runTasks(instance, Command$GclAtom.Local.dispatch(param$1[0]));
                          case /* SendRequest */3 :
                              return Async$GclAtom.thenOk((function (x) {
                                              return runTasks(instance, handle(x));
                                            }))(sendRequest(param$1[0], instance));
                          case /* Display */4 :
                              Curry._1(instance[/* view */1][/* setHeader */1], param$1[0]);
                              Curry._1(instance[/* view */1][/* setBody */2], param$1[1]);
                              return Async$GclAtom.resolve(/* () */0);
                          
                        }
                      }), tasks)));
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.View = View;
exports.Connection = Connection;
exports.destroy = destroy$1;
exports.handle = handle;
exports.runTasks = runTasks;
/* Spec-GclAtom Not a pure module */
