// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var Spec$GclAtom = require("./Instance/Spec.bs.js");
var View$GclAtom = require("./View.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");
var Command$GclAtom = require("./Command.bs.js");
var Request$GclAtom = require("./Request.bs.js");
var Response$GclAtom = require("./Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Decoration$GclAtom = require("./Instance/Decoration.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            Connection$GclAtom.make(/* () */0),
            [],
            []
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function disconnect(instance) {
  Connection$GclAtom.disconnect(instance[/* connection */3]);
  return /* () */0;
}

function getConnection(instance) {
  var isConnected = Connection$GclAtom.isConnected(instance[/* connection */3]);
  if (isConnected) {
    return Async$GclAtom.resolve(instance[/* connection */3]);
  } else {
    return Async$GclAtom.thenOk((function (param) {
                    return Async$GclAtom.resolve(instance[/* connection */3]);
                  }))(Connection$GclAtom.connect(instance[/* connection */3]));
  }
}

function sendRequest(request, instance) {
  var partial_arg = Request$GclAtom.encode(request);
  return Async$GclAtom.mapOk((function (result) {
                  console.log("[ received json ]", result);
                  console.log("[ received value ]", Response$GclAtom.decode(result));
                  return Response$GclAtom.decode(result);
                }))(Async$GclAtom.mapError((function (error) {
                      var match = Connection$GclAtom.$$Error.toString(error);
                      return displayError(match[0], match[1], instance);
                    }))(Async$GclAtom.thenOk((function (param) {
                          return Connection$GclAtom.send(partial_arg, param);
                        }))(getConnection(instance))));
}

var Connection = {
  disconnect: disconnect,
  getConnection: getConnection,
  sendRequest: sendRequest
};

function destroy$1(instance) {
  disconnect(instance);
  Decoration$GclAtom.destroyAll(instance);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function handle(error) {
  var handleSyntaxError = function (site) {
    return (function (param) {
        switch (param.tag | 0) {
          case /* LexicalError */0 :
              var point = param[0];
              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                Decoration$GclAtom.markError(point, instance);
                                return Async$GclAtom.resolve(/* [] */0);
                              })]),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                /* Error */Caml_chrome_debugger.variant("Error", 1, ["Lexical Error"]),
                                /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["at " + (String(point.row) + ("," + String(point.column)))])
                              ]),
                            /* [] */0
                          ])
                      ]);
          case /* SyntacticError */1 :
              var match = Rebase.$$Array.get(param[0], 0);
              if (match !== undefined) {
                var match$1 = match;
                var locations = match$1[/* locations */0];
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                  Rebase.$$Array.forEach((function (range) {
                                          return Decoration$GclAtom.markError$prime(range, instance);
                                        }), locations);
                                  return Async$GclAtom.resolve(/* [] */0);
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Parse Error"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match$1[/* message */1]])
                                ]),
                              /* [] */0
                            ])
                        ]);
              } else {
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 4, [
                              /* AllGood */0,
                              /* Nothing */0
                            ]),
                          /* [] */0
                        ]);
              }
          case /* TransformError */2 :
              var match$2 = param[0];
              if (typeof match$2 === "number") {
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 4, [
                              /* Error */Caml_chrome_debugger.variant("Error", 1, ["Postcondition Missing"]),
                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The last statement of the program should be an assertion"])
                            ]),
                          /* [] */0
                        ]);
              } else {
                switch (match$2.tag | 0) {
                  case /* MissingBound */0 :
                      var range = match$2[0];
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                        Decoration$GclAtom.highlightError(range, instance);
                                        return Async$GclAtom.resolve(/* [] */0);
                                      })]),
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Bound Missing"]),
                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Bound missing at the end of the assertion before the DO construct \" , bnd : ... }\""])
                                      ]),
                                    /* [] */0
                                  ])
                              ]);
                  case /* MissingAssertion */1 :
                      var range$1 = match$2[0];
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                        Decoration$GclAtom.highlightError(range$1, instance);
                                        return Async$GclAtom.resolve(/* [] */0);
                                      })]),
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Assertion Missing"]),
                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Assertion before the DO construct is missing"])
                                      ]),
                                    /* [] */0
                                  ])
                              ]);
                  case /* ExcessBound */2 :
                      var range$2 = match$2[0];
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                        Decoration$GclAtom.highlightError(range$2, instance);
                                        return Async$GclAtom.resolve(/* [] */0);
                                      })]),
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Excess Bound"]),
                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Unnecessary bound annotation at this assertion"])
                                      ]),
                                    /* [] */0
                                  ])
                              ]);
                  case /* DigHole */3 :
                      var range$3 = match$2[0];
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                        return Async$GclAtom.thenOk((function (param) {
                                                        return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 2, [/* Save */1]),
                                                                      /* [] */0
                                                                    ]));
                                                      }))(Decoration$GclAtom.digHole(range$3, instance));
                                      })]),
                                /* [] */0
                              ]);
                  case /* Panic */4 :
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["This should not have happened, please report this issue\n" + match$2[0]])
                                  ]),
                                /* [] */0
                              ]);
                  
                }
              }
          
        }
      });
  };
  var handleError = function (param) {
    return handleSyntaxError(param[0])(param[1][0]);
  };
  switch (error.tag | 0) {
    case /* Error */0 :
        return Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(handleError, error[0])));
    case /* OK */1 :
        var specifications = error[1];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Rebase.$$Array.forEach(Curry._2(Rebase.Fn.flip, Decoration$GclAtom.markSpec, instance), specifications);
                          instance[/* specifications */5] = specifications;
                          return Async$GclAtom.resolve(/* [] */0);
                        })]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Display */Caml_chrome_debugger.variant("Display", 4, [
                          /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Proof Obligations"]),
                          /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [error[0]])
                        ]),
                      /* [] */0
                    ])
                ]);
    case /* Resolve */2 :
        var i = error[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Spec$GclAtom.resolve(i, instance);
                          return Async$GclAtom.resolve(/* [] */0);
                        })]),
                  /* [] */0
                ]);
    case /* UnknownResponse */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 4, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic: unknown response from GCL"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [JSON.stringify(error[0])])
                    ]),
                  /* [] */0
                ]);
    
  }
}

function runTasks(instance, tasks) {
  var runTask = function (param) {
    switch (param.tag | 0) {
      case /* WithInstance */0 :
          return Async$GclAtom.thenOk((function (param) {
                          return runTasks(instance, param);
                        }))(Curry._1(param[0], instance));
      case /* DispatchRemote */1 :
          return runTasks(instance, Command$GclAtom.Remote.dispatch(param[0]));
      case /* DispatchLocal */2 :
          return runTasks(instance, Command$GclAtom.Local.dispatch(param[0]));
      case /* SendRequest */3 :
          return Async$GclAtom.thenOk((function (x) {
                          return runTasks(instance, handle(x));
                        }))(sendRequest(param[0], instance));
      case /* Display */4 :
          Curry._1(instance[/* view */1][/* setHeader */1], param[0]);
          Curry._1(instance[/* view */1][/* setBody */2], param[1]);
          return Async$GclAtom.resolve(/* () */0);
      
    }
  };
  return Async$GclAtom.thenOk((function (param) {
                  return Async$GclAtom.resolve(/* () */0);
                }))(Async$GclAtom.mapError((function (param) {
                      return /* () */0;
                    }))(Async$GclAtom.fromPromise(Promise.all(Rebase.$$Array.fromList(Rebase.List.map(runTask, tasks))))));
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.View = View;
exports.Connection = Connection;
exports.destroy = destroy$1;
exports.handle = handle;
exports.runTasks = runTasks;
/* Spec-GclAtom Not a pure module */
