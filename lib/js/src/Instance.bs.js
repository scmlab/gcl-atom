// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Ok$GclAtom = require("./Util/Ok.bs.js");
var Spec$GclAtom = require("./GCL/Spec.bs.js");
var Util$GclAtom = require("./Util.bs.js");
var View$GclAtom = require("./Editor/View.bs.js");
var Request$GclAtom = require("./GCL/Request.bs.js");
var Response$GclAtom = require("./GCL/Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications",
            "history"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            Connection$GclAtom.make(/* () */0),
            [],
            [],
            undefined
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function disconnect(instance) {
  Connection$GclAtom.disconnect(instance[/* connection */3]);
  return /* () */0;
}

function getConnection(instance) {
  var isConnected = Connection$GclAtom.isConnected(instance[/* connection */3]);
  if (isConnected) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [instance[/* connection */3]]));
  } else {
    return $$Promise.mapOk(Connection$GclAtom.connect(instance[/* connection */3]), (function (param) {
                  return instance[/* connection */3];
                }));
  }
}

function sendRequest(request, instance) {
  var value = Request$GclAtom.encode(request);
  console.log("=== Send ===");
  console.log("[ json ]", value);
  return Ok$GclAtom.let_(getConnection(instance), (function (conn) {
                return Ok$GclAtom.let_(Connection$GclAtom.send(value, conn), (function (result) {
                              console.log("=== Recieved ===");
                              console.log("[ json ]", result);
                              console.log("[ value ]", Response$GclAtom.decode(result));
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [Response$GclAtom.decode(result)]));
                            }));
              }));
}

var Connection_ = {
  disconnect: disconnect,
  getConnection: getConnection,
  sendRequest: sendRequest
};

function destroy$1(instance) {
  disconnect(instance);
  Rebase.$$Array.forEach((function (prim) {
          prim.destroy();
          return /* () */0;
        }), instance[/* decorations */4]);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function dispatch(param) {
  switch (param) {
    case /* Toggle */0 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          if (instance[/* toggle */2]) {
                            instance[/* toggle */2] = false;
                            Curry._1(instance[/* view */1][/* setActivation */0], false);
                            Rebase.$$Array.forEach((function (prim) {
                                    prim.destroy();
                                    return /* () */0;
                                  }), instance[/* decorations */4]);
                            Connection$GclAtom.disconnect(instance[/* connection */3]);
                            return $$Promise.resolved(/* [] */0);
                          } else {
                            instance[/* toggle */2] = true;
                            Curry._1(instance[/* view */1][/* setActivation */0], true);
                            if (Connection$GclAtom.isConnected(instance[/* connection */3])) {
                              return $$Promise.resolved(/* [] */0);
                            } else {
                              return $$Promise.map(getConnection(instance), (function (param) {
                                            if (param.tag) {
                                              var match = Connection$GclAtom.$$Error.toString(param[0]);
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                                            /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                                          ]),
                                                        /* [] */0
                                                      ]);
                                            } else {
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 4, [/* Save */1]),
                                                        /* [] */0
                                                      ]);
                                            }
                                          }));
                            }
                          }
                        })]),
                  /* [] */0
                ]);
    case /* Save */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Rebase.$$Array.forEach((function (prim) {
                                  prim.destroy();
                                  return /* () */0;
                                }), instance[/* decorations */4]);
                          return $$Promise.map($$Promise.Js.$$catch($$Promise.Js.fromBsPromise(instance[/* editor */0].save()), (function (param) {
                                            return $$Promise.resolved(/* () */0);
                                          })), (function (param) {
                                        var filepath = instance[/* editor */0].getPath();
                                        if (filepath !== undefined) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* DispatchRemote */Caml_chrome_debugger.variant("DispatchRemote", 3, [/* Load */Caml_chrome_debugger.variant("Load", 0, [filepath])]),
                                                    /* [] */0
                                                  ]);
                                        } else {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read filepath"]),
                                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please save the file first"])
                                                      ]),
                                                    /* [] */0
                                                  ]);
                                        }
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* Refine */2 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          return Rebase.$$Option.mapOr((function (spec) {
                                        return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* DispatchRemote */Caml_chrome_debugger.variant("DispatchRemote", 3, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [spec])]),
                                                      /* [] */0
                                                    ]));
                                      }), $$Promise.resolved(/* [] */0), Spec$GclAtom.fromCursorPosition(instance));
                        })]),
                  /* [] */0
                ]);
    case /* Debug */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchRemote */Caml_chrome_debugger.variant("DispatchRemote", 3, [/* Debug */0]),
                  /* [] */0
                ]);
    
  }
}

var Local = {
  dispatch: dispatch
};

function dispatch$1(param) {
  if (typeof param === "number") {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 5, [/* Debug */0]),
              /* [] */0
            ]);
  } else if (param.tag) {
    var spec = param[0];
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                      var payload = Spec$GclAtom.getPayload(spec, instance);
                      console.log("[refine]", spec[/* range */4]);
                      return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 5, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [
                                            spec[/* id */0],
                                            payload
                                          ])]),
                                    /* [] */0
                                  ]));
                    })]),
              /* [] */0
            ]);
  } else {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 5, [/* Load */Caml_chrome_debugger.variant("Load", 0, [param[0]])]),
              /* [] */0
            ]);
  }
}

var Remote = {
  dispatch: dispatch$1
};

var Command_ = {
  Local: Local,
  Remote: Remote
};

function runTasks(instance, tasks) {
  var runTask = function (param) {
    switch (param.tag | 0) {
      case /* WithInstance */0 :
          return $$Promise.flatMap(Curry._1(param[0], instance), (function (param) {
                        return runTasks(instance, param);
                      }));
      case /* SetSpecifications */1 :
          instance[/* specifications */5] = param[0];
          return $$Promise.resolved(/* () */0);
      case /* AddDecorations */2 :
          instance[/* decorations */4] = Rebase.$$Array.concat(Curry._2(param[0], instance[/* specifications */5], instance[/* editor */0]), instance[/* decorations */4]);
          return $$Promise.resolved(/* () */0);
      case /* DispatchRemote */3 :
          var command = param[0];
          instance[/* history */6] = command;
          return runTasks(instance, dispatch$1(command));
      case /* DispatchLocal */4 :
          return runTasks(instance, dispatch(param[0]));
      case /* SendRequest */5 :
          return $$Promise.flatMap(sendRequest(param[0], instance), (function (param) {
                        if (param.tag) {
                          var match = Connection$GclAtom.$$Error.toString(param[0]);
                          displayError(match[0], match[1], instance);
                          return $$Promise.resolved(/* () */0);
                        } else {
                          return runTasks(instance, Response$GclAtom.handle(param[0]));
                        }
                      }));
      case /* Display */6 :
          Curry._1(instance[/* view */1][/* setHeader */1], param[0]);
          Curry._1(instance[/* view */1][/* setBody */2], param[1]);
          return $$Promise.resolved(/* () */0);
      
    }
  };
  return $$Promise.map(Util$GclAtom.$$Promise.each(Rebase.List.map(runTask, tasks)), (function (param) {
                return /* () */0;
              }));
}

exports.make = make;
exports.View = View;
exports.Connection_ = Connection_;
exports.destroy = destroy$1;
exports.Command_ = Command_;
exports.runTasks = runTasks;
/* Promise Not a pure module */
