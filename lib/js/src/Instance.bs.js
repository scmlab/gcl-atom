// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var View$GclAtom = require("./Editor/View.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");
var Command$GclAtom = require("./Editor/Command.bs.js");
var Request$GclAtom = require("./GCL/Request.bs.js");
var Response$GclAtom = require("./GCL/Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications",
            "history"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            Connection$GclAtom.make(/* () */0),
            [],
            [],
            undefined
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function disconnect(instance) {
  Connection$GclAtom.disconnect(instance[/* connection */3]);
  return /* () */0;
}

function getConnection(instance) {
  var isConnected = Connection$GclAtom.isConnected(instance[/* connection */3]);
  if (isConnected) {
    return Async$GclAtom.resolve(instance[/* connection */3]);
  } else {
    return Async$GclAtom.thenOk((function (param) {
                    return Async$GclAtom.resolve(instance[/* connection */3]);
                  }))(Connection$GclAtom.connect(instance[/* connection */3]));
  }
}

function sendRequest(request, instance) {
  return Async$GclAtom.mapOk((function (result) {
                  console.log("=== Recieved ===");
                  console.log("[ json ]", result);
                  console.log("[ value ]", Response$GclAtom.decode(result));
                  return Response$GclAtom.decode(result);
                }))(Async$GclAtom.mapError((function (error) {
                      var match = Connection$GclAtom.$$Error.toString(error);
                      return displayError(match[0], match[1], instance);
                    }))(Async$GclAtom.thenOk((function (conn) {
                          var value = Request$GclAtom.encode(request);
                          console.log("=== Send ===");
                          console.log("[ json ]", value);
                          return Connection$GclAtom.send(value, conn);
                        }))(getConnection(instance))));
}

var Connection = {
  disconnect: disconnect,
  getConnection: getConnection,
  sendRequest: sendRequest
};

function destroy$1(instance) {
  disconnect(instance);
  Response$GclAtom.Decoration.destroyAll(instance);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function runTasks(instance, tasks) {
  return Async$GclAtom.thenOk((function (param) {
                  return Async$GclAtom.resolve(/* () */0);
                }))(Async$GclAtom.each(Rebase.List.map((function (x, param) {
                        var param$1 = x;
                        switch (param$1.tag | 0) {
                          case /* WithInstance */0 :
                              return Async$GclAtom.thenOk((function (param) {
                                              return runTasks(instance, param);
                                            }))(Curry._1(param$1[0], instance));
                          case /* DispatchRemote */1 :
                              var command = param$1[0];
                              instance[/* history */6] = command;
                              return runTasks(instance, Command$GclAtom.Remote.dispatch(command));
                          case /* DispatchLocal */2 :
                              return runTasks(instance, Command$GclAtom.Local.dispatch(param$1[0]));
                          case /* SendRequest */3 :
                              return Async$GclAtom.thenOk((function (x) {
                                              return runTasks(instance, Response$GclAtom.handle(x));
                                            }))(sendRequest(param$1[0], instance));
                          case /* Display */4 :
                              Curry._1(instance[/* view */1][/* setHeader */1], param$1[0]);
                              Curry._1(instance[/* view */1][/* setBody */2], param$1[1]);
                              return Async$GclAtom.resolve(/* () */0);
                          
                        }
                      }), tasks)));
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.View = View;
exports.Connection = Connection;
exports.destroy = destroy$1;
exports.runTasks = runTasks;
/* View-GclAtom Not a pure module */
