// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Ok$GclAtom = require("./Util/Ok.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var View$GclAtom = require("./Editor/View.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var GCL__Request$GclAtom = require("./GCL/GCL__Request.bs.js");
var GCL__Response$GclAtom = require("./GCL/GCL__Response.bs.js");

function toString(param) {
  if (param.tag) {
    return /* tuple */[
            "JSON Decode Error",
            param[0] + ("\nJSON from GCL: \n" + JSON.stringify(param[1]))
          ];
  } else {
    return Connection$GclAtom.$$Error.toString(param[0]);
  }
}

var $$Error = {
  toString: toString
};

function make(editor) {
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "toggle",
            "connection",
            "decorations",
            "specifications",
            "history"
          ], [
            editor,
            View$GclAtom.make(editor),
            false,
            undefined,
            [],
            [],
            undefined
          ]);
}

function destroy(instance) {
  return View$GclAtom.destroy(instance[/* editor */0]);
}

function show(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], true);
  return /* () */0;
}

function hide(instance) {
  Curry._1(instance[/* view */1][/* setActivation */0], false);
  return /* () */0;
}

function displayError(header, body, instance) {
  Curry._1(instance[/* view */1][/* setHeader */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [header]));
  Curry._1(instance[/* view */1][/* setBody */2], /* Plain */Caml_chrome_debugger.variant("Plain", 1, [body]));
  return /* () */0;
}

var View = {
  destroy: destroy,
  show: show,
  hide: hide,
  displayError: displayError
};

function persist(instance, conn) {
  instance[/* connection */3] = conn;
  return /* () */0;
}

function establish(instance) {
  var match = instance[/* connection */3];
  if (match !== undefined) {
    return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [match]));
  } else {
    return $$Promise.tapOk($$Promise.mapError(Connection$GclAtom.make(/* () */0), (function (e) {
                      return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                    })), (function (param) {
                  instance[/* connection */3] = param;
                  return /* () */0;
                }));
  }
}

function destroy$1(instance) {
  var match = instance[/* connection */3];
  if (match !== undefined) {
    Connection$GclAtom.disconnect(match);
    instance[/* connection */3] = undefined;
    return /* () */0;
  } else {
    return /* () */0;
  }
}

function sendRequest(request, instance) {
  var value = Curry._1(GCL__Request$GclAtom.encode, request);
  console.log("<<<", value);
  return Ok$GclAtom.let_(establish(instance), (function (conn) {
                return Ok$GclAtom.let_($$Promise.mapError(Connection$GclAtom.send(value, conn), (function (e) {
                                  return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                                })), (function (result) {
                              console.log(">>>", result);
                              var value;
                              try {
                                value = GCL__Response$GclAtom.decode(result);
                              }
                              catch (raw_exn){
                                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                if (exn[0] === Json_decode.DecodeError) {
                                  return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* Decode */Caml_chrome_debugger.variant("Decode", 1, [
                                                    exn[1],
                                                    result
                                                  ])]));
                                } else {
                                  throw exn;
                                }
                              }
                              return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [value]));
                            }));
              }));
}

var Connection_ = {
  persist: persist,
  establish: establish,
  destroy: destroy$1,
  sendRequest: sendRequest
};

function destroy$2(instance) {
  Rebase.$$Array.forEach((function (prim) {
          prim.destroy();
          return /* () */0;
        }), instance[/* decorations */4]);
  Rebase.$$Option.forEach(Curry._2(Rebase.Fn.$great$great, Connection$GclAtom.disconnect, (function (prim) {
              return /* () */0;
            })), instance[/* connection */3]);
  return View$GclAtom.destroy(instance[/* editor */0]);
}

exports.$$Error = $$Error;
exports.make = make;
exports.View = View;
exports.Connection_ = Connection_;
exports.destroy = destroy$2;
/* Promise Not a pure module */
