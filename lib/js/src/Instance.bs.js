// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var View$GclAtom = require("./View.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");
var Handler$GclAtom = require("./Handler.bs.js");
var Request$GclAtom = require("./Request.bs.js");
var Response$GclAtom = require("./Response.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(editor) {
  console.log("[ instance ][ construct ]", editor.getPath());
  atom.views.getView(editor).classList.add("gcl");
  var view = View$GclAtom.create(/* () */0);
  var connection = Connection$GclAtom.make(/* () */0);
  return /* record */Caml_chrome_debugger.record([
            "editor",
            "view",
            "connection",
            "decorations"
          ], [
            editor,
            view,
            connection,
            []
          ]);
}

function destroy(instance) {
  console.log("[ instance ][ destroy ]", instance[/* editor */0].getPath());
  atom.views.getView(instance[/* editor */0]).classList.remove("gcl");
  Connection$GclAtom.disconnect(instance[/* connection */2]);
  return Rebase.$$Array.forEach((function (prim) {
                prim.destroy();
                return /* () */0;
              }), instance[/* decorations */3]);
}

function dispatch(request, instance) {
  switch (request) {
    case /* Activate */0 :
        if (Connection$GclAtom.isConnected(instance[/* connection */2])) {
          return /* () */0;
        } else {
          return Async$GclAtom.finalError((function (error) {
                        var match = Connection$GclAtom.$$Error.toString(error);
                        Curry._1(instance[/* view */1][/* setHeader */0], match[0]);
                        Curry._1(instance[/* view */1][/* setBody */1], match[1]);
                        return /* () */0;
                      }), Async$GclAtom.thenOk((function (param) {
                              Curry._1(instance[/* view */1][/* setHeader */0], "All good");
                              Curry._1(instance[/* view */1][/* setBody */1], "All good");
                              return Async$GclAtom.resolve(/* () */0);
                            }))(Connection$GclAtom.connect(instance[/* connection */2])));
        }
    case /* Deactivate */1 :
        Connection$GclAtom.disconnect(instance[/* connection */2]);
        console.log("[ deactivate ]");
        return /* () */0;
    case /* Save */2 :
        Rebase.$$Array.forEach((function (prim) {
                prim.destroy();
                return /* () */0;
              }), instance[/* decorations */3]);
        return Async$GclAtom.finalOk((function (result) {
                      console.log("[ received json ]", Response$GclAtom.test(result));
                      console.log("[ received value ]", Response$GclAtom.parse(result));
                      return Rebase.$$Option.forEach((function (param) {
                                    return Handler$GclAtom.handle(instance, param);
                                  }), Response$GclAtom.parse(result));
                    }), Async$GclAtom.thenOk((function (param) {
                            var filepath = instance[/* editor */0].getPath();
                            if (filepath !== undefined) {
                              return Async$GclAtom.mapError((function (error) {
                                              var match = Connection$GclAtom.$$Error.toString(error);
                                              Curry._1(instance[/* view */1][/* setHeader */0], match[0]);
                                              Curry._1(instance[/* view */1][/* setBody */1], match[1]);
                                              return /* () */0;
                                            }))(Connection$GclAtom.send(Request$GclAtom.encode(/* Load */Caml_chrome_debugger.simpleVariant("Load", [filepath])), instance[/* connection */2]));
                            } else {
                              Curry._1(instance[/* view */1][/* setHeader */0], "Cannot read filepath ");
                              Curry._1(instance[/* view */1][/* setBody */1], "Please save the file first");
                              return Async$GclAtom.reject(/* () */0);
                            }
                          }))(Async$GclAtom.mapError((function (param) {
                                return /* () */0;
                              }))(Async$GclAtom.fromPromise(instance[/* editor */0].save()))));
    
  }
}

function activate(param) {
  return /* () */0;
}

function deactivate(param) {
  return /* () */0;
}

var $$Event = 0;

exports.$$Event = $$Event;
exports.make = make;
exports.destroy = destroy;
exports.dispatch = dispatch;
exports.activate = activate;
exports.deactivate = deactivate;
/* View-GclAtom Not a pure module */
