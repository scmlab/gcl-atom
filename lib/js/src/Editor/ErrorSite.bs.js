// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Decoder$GclAtom = require("../GCL/Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "Global" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Global */Caml_chrome_debugger.variant("Global", 0, [Decoder$GclAtom.range(json)]);
                          })]);
          case "Local" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Local */Caml_chrome_debugger.variant("Local", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Decoder$GclAtom.range, Json_decode.$$int, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toRange(site, specifications) {
  if (site.tag) {
    var i = site[1];
    var range = site[0];
    var specs = Rebase.$$Array.filter((function (spec) {
            return spec[/* id */0] === i;
          }), specifications);
    return Rebase.$$Option.mapOr((function (spec) {
                  return range.translate(spec[/* range */4].start, spec[/* range */4].start).translate(new Atom.Point(1, 0), new Atom.Point(1, 0));
                }), range, Rebase.$$Array.get(specs, 0));
  } else {
    return site[0];
  }
}

function toString(site) {
  var rangeToString = function (range) {
    return String(range.start.row) + (":" + (String(range.start.column) + ("-" + (String(range.end.row) + (":" + String(range.end.column))))));
  };
  if (site.tag) {
    return "at " + (rangeToString(site[0]) + (" in #" + String(site[1])));
  } else {
    return "at " + rangeToString(site[0]);
  }
}

exports.decode = decode;
exports.toRange = toRange;
exports.toString = toString;
/* decode Not a pure module */
