// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var View$GclAtom = require("./View.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function View(Editor) {
  var make = function (param, editor) {
    return View$GclAtom.make2(editor);
  };
  var destroy = View$GclAtom.destroy2;
  return {
          make: make,
          destroy: destroy
        };
}

var Impl = Caml_module.init_mod(/* tuple */[
      "AtomImpl.re",
      14,
      37
    ], /* Module */Caml_chrome_debugger.variant("Module", 0, [[
          /* tuple */[
            /* Function */0,
            "getExtensionPath"
          ],
          /* tuple */[
            /* Function */0,
            "getFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeActivation"
          ],
          /* tuple */[
            /* Function */0,
            "onDidCloseEditor"
          ],
          /* tuple */[
            /* Function */0,
            "registerCommand"
          ],
          /* tuple */[
            /* Function */0,
            "addToSubscriptions"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "getGCLPath"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "setGCLPath"
                  ]
                ]]),
            "Config"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "make"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "destroy"
                  ]
                ]]),
            "View"
          ]
        ]]));

function getExtensionPath(param) {
  return Belt_Option.getWithDefault(atom.packages.resolvePackagePath("gcl-atom"), "");
}

function getFileName(editor) {
  return Belt_Option.getWithDefault(editor.getPath(), "");
}

function addToSubscriptions(disposable, subscriptions) {
  subscriptions.add(disposable);
  return /* () */0;
}

function onDidCloseEditor(callback) {
  return atom.workspace.observeTextEditors((function (editor) {
                var subscriptions = new Atom.CompositeDisposable();
                subscriptions.add(editor.onDidDestroy((function (param) {
                            Belt_Option.forEach(editor.getPath(), callback);
                            subscriptions.dispose();
                            return /* () */0;
                          })));
                return /* () */0;
              }));
}

function onDidChangeFileName(callback) {
  return atom.workspace.observeTextEditors((function (editor) {
                var subscriptions = new Atom.CompositeDisposable();
                var previous = {
                  contents: editor.getPath()
                };
                subscriptions.add(editor.onDidChangePath((function (param) {
                            var next = editor.getPath();
                            if (Caml_obj.caml_notequal(next, previous.contents)) {
                              Curry._2(callback, previous.contents, next);
                              previous.contents = next;
                              return /* () */0;
                            } else {
                              return 0;
                            }
                          })));
                return /* () */0;
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: atom.workspace.getActiveTextEditor()
  };
  return atom.workspace.onDidChangeActiveTextEditor((function (next) {
                if (Caml_obj.caml_notequal(next, previous.contents)) {
                  Curry._2(callback, Belt_Option.flatMap(previous.contents, (function (prim) {
                              return prim.getPath();
                            })), Belt_Option.flatMap(next, (function (prim) {
                              return prim.getPath();
                            })));
                  previous.contents = next;
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function registerCommand(name, callback) {
  var eventTargetEditor = function ($$event) {
    var targetSubElement = $$event.target;
    var targetedEditors = Belt_Array.keep(atom.workspace.getTextEditors(), (function (x) {
            return atom.views.getView(x).contains(targetSubElement);
          }));
    return Belt_Array.get(targetedEditors, 0);
  };
  return atom.commands.add("atom-text-editor", "gcl-atom:" + name, (function ($$event) {
                return Belt_Option.forEach(eventTargetEditor($$event), callback);
              }));
}

function setGCLPath(value) {
  atom.config.set("gcl-atom.path", value);
  return $$Promise.resolved(/* () */0);
}

function getGCLPath(param) {
  return atom.config.get("gcl-atom.path");
}

function make(param, editor) {
  return View$GclAtom.make2(editor);
}

var destroy = View$GclAtom.destroy2;

var View$1 = {
  make: make,
  destroy: destroy
};

Caml_module.update_mod(/* Module */Caml_chrome_debugger.variant("Module", 0, [[
          /* tuple */[
            /* Function */0,
            "getExtensionPath"
          ],
          /* tuple */[
            /* Function */0,
            "getFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeFileName"
          ],
          /* tuple */[
            /* Function */0,
            "onDidChangeActivation"
          ],
          /* tuple */[
            /* Function */0,
            "onDidCloseEditor"
          ],
          /* tuple */[
            /* Function */0,
            "registerCommand"
          ],
          /* tuple */[
            /* Function */0,
            "addToSubscriptions"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "getGCLPath"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "setGCLPath"
                  ]
                ]]),
            "Config"
          ],
          /* tuple */[
            /* Module */Caml_chrome_debugger.variant("Module", 0, [[
                  /* tuple */[
                    /* Function */0,
                    "make"
                  ],
                  /* tuple */[
                    /* Function */0,
                    "destroy"
                  ]
                ]]),
            "View"
          ]
        ]]), Impl, {
      getExtensionPath: getExtensionPath,
      getFileName: getFileName,
      onDidChangeFileName: onDidChangeFileName,
      onDidChangeActivation: onDidChangeActivation,
      onDidCloseEditor: onDidCloseEditor,
      registerCommand: registerCommand,
      addToSubscriptions: addToSubscriptions,
      Config: {
        getGCLPath: getGCLPath,
        setGCLPath: setGCLPath
      },
      View: View$1
    });

exports.View = View;
exports.Impl = Impl;
/* Impl Not a pure module */
