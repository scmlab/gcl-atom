// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var PanelContainer$GclAtom = require("./PanelContainer.bs.js");

function getExtensionPath(param) {
  return Belt_Option.getWithDefault(atom.packages.resolvePackagePath("gcl-atom"), "");
}

function getFileName(editor) {
  return editor.getPath();
}

function save(editor) {
  return $$Promise.map($$Promise.Js.toResult($$Promise.Js.fromBsPromise(editor.save())), (function (param) {
                if (param.tag) {
                  return false;
                } else {
                  return true;
                }
              }));
}

function toPoint(param) {
  return new Atom.Point(param[1] - 1 | 0, param[2] - 1 | 0);
}

function fromPoint(filepath, point) {
  return /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
            filepath,
            point.row + 1 | 0,
            point.column + 1 | 0
          ]);
}

function toRange(param) {
  if (param) {
    var match = param[1];
    return new Atom.Range(toPoint(param[0]), new Atom.Point(match[1] - 1 | 0, match[2]));
  } else {
    return new Atom.Range(new Atom.Point(0, 0), new Atom.Point(0, 0));
  }
}

function fromRange(filepath, range) {
  var start = range.start;
  var end_ = range.end;
  return /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                start.row + 1 | 0,
                start.column + 1 | 0
              ]),
            /* Pos */Caml_chrome_debugger.simpleVariant("Pos", [
                filepath,
                end_.row + 1 | 0,
                end_.column
              ])
          ]);
}

function addToSubscriptions(disposable, subscriptions) {
  subscriptions.add(disposable);
  return /* () */0;
}

function onDidCloseEditor(callback) {
  return atom.workspace.observeTextEditors((function (editor) {
                var subscriptions = new Atom.CompositeDisposable();
                subscriptions.add(editor.onDidDestroy((function (param) {
                            Belt_Option.forEach(editor.getPath(), callback);
                            subscriptions.dispose();
                            return /* () */0;
                          })));
                return /* () */0;
              }));
}

function onDidChangeFileName(callback) {
  return atom.workspace.observeTextEditors((function (editor) {
                var subscriptions = new Atom.CompositeDisposable();
                var previous = {
                  contents: editor.getPath()
                };
                subscriptions.add(editor.onDidChangePath((function (param) {
                            var next = editor.getPath();
                            if (Caml_obj.caml_notequal(next, previous.contents)) {
                              Curry._2(callback, previous.contents, next);
                              previous.contents = next;
                              return /* () */0;
                            } else {
                              return 0;
                            }
                          })));
                return /* () */0;
              }));
}

function onDidChangeActivation(callback) {
  var previous = {
    contents: atom.workspace.getActiveTextEditor()
  };
  return atom.workspace.onDidChangeActiveTextEditor((function (next) {
                var previousFileName = Belt_Option.flatMap(previous.contents, (function (prim) {
                        return prim.getPath();
                      }));
                var nextFileName = Belt_Option.flatMap(next, (function (prim) {
                        return prim.getPath();
                      }));
                if (Caml_obj.caml_notequal(previousFileName, nextFileName)) {
                  Curry._2(callback, previousFileName, nextFileName);
                  previous.contents = next;
                  return /* () */0;
                } else {
                  return 0;
                }
              }));
}

function registerCommand(name, callback) {
  var eventTargetEditor = function ($$event) {
    var targetSubElement = $$event.target;
    var targetedEditors = Belt_Array.keep(atom.workspace.getTextEditors(), (function (x) {
            return atom.views.getView(x).contains(targetSubElement);
          }));
    return Belt_Array.get(targetedEditors, 0);
  };
  return atom.commands.add("atom-text-editor", "gcl-atom:" + name, (function ($$event) {
                return Belt_Option.forEach(eventTargetEditor($$event), callback);
              }));
}

function setGCLPath(value) {
  atom.config.set("gcl-atom.path", value);
  return $$Promise.resolved(/* () */0);
}

function getGCLPath(param) {
  return atom.config.get("gcl-atom.path");
}

function make(param, editor) {
  return PanelContainer$GclAtom.make(editor);
}

function destroy(view) {
  return /* () */0;
}

function show(view) {
  return /* () */0;
}

function hide(view) {
  return /* () */0;
}

function send(view, request) {
  return $$Promise.resolved(true);
}

function recv(view, callback) {
  return new Atom.Disposable((function (param) {
                return /* () */0;
              }));
}

var View = {
  make: make,
  destroy: destroy,
  show: show,
  hide: hide,
  send: send,
  recv: recv
};

var Impl_Config = {
  getGCLPath: getGCLPath,
  setGCLPath: setGCLPath
};

var Impl = {
  editorType: /* Atom */0,
  getExtensionPath: getExtensionPath,
  getFileName: getFileName,
  save: save,
  toPoint: toPoint,
  fromPoint: fromPoint,
  toRange: toRange,
  fromRange: fromRange,
  onDidChangeFileName: onDidChangeFileName,
  onDidChangeActivation: onDidChangeActivation,
  onDidCloseEditor: onDidCloseEditor,
  registerCommand: registerCommand,
  addToSubscriptions: addToSubscriptions,
  Config: Impl_Config,
  View: View
};

exports.Impl = Impl;
/* atom Not a pure module */
