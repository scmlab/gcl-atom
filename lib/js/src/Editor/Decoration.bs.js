// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var Base$GclAtom = require("../GCL/Base.bs.js");
var Syntax$GclAtom = require("../GCL/Syntax.bs.js");
var Response$GclAtom = require("../GCL/Response.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function mark(type_, class_, loc, editor) {
  var range = Base$GclAtom.Loc.toRange(loc);
  var marker = editor.markBufferRange(range);
  var option = {
    type: type_,
    class: class_
  };
  return editor.decorateMarker(marker, option);
}

function markLineSpecSoft(param, param$1) {
  return mark("highlight", "highlight-spec-soft", param, param$1);
}

function markLineSpecHard(param, param$1) {
  return mark("highlight", "highlight-spec-hard", param, param$1);
}

function overlay(text, class_, tail, translation, loc, editor) {
  var range = Base$GclAtom.Loc.toRange(loc);
  var element = document.createElement("div");
  element.innerHTML = text;
  element.classList.add(class_);
  var top = (translation[0] - 1 | 0) * 1.5;
  element.setAttribute("style", "left: " + (String(translation[1]) + ("ex; top: " + (top.toString() + "em"))));
  var marker = editor.markBufferRange(range);
  var option = {
    type: "overlay",
    item: element,
    position: tail ? "tail" : "head"
  };
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            editor.decorateMarker(marker, option),
            /* [] */0
          ]);
}

function overlaySpec(text) {
  var partial_arg = /* tuple */[
    0,
    1
  ];
  return (function (param, param$1) {
      return overlay(text, "overlay-spec-text", false, partial_arg, param, param$1);
    });
}

function overlayError(loc, editor) {
  var length = editor.getTextInBufferRange(Base$GclAtom.Loc.toRange(loc)).length;
  var text = "&nbsp;".repeat(length);
  return overlay(text, "overlay-error", true, /* tuple */[
              0,
              0
            ], loc, editor);
}

function markSpec(spec, editor) {
  var match = spec.loc;
  if (match) {
    var end_ = match[1];
    var start = match[0];
    var startLoc_001 = Base$GclAtom.Pos.translateBy(0, 2, start);
    var startLoc = /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
        start,
        startLoc_001
      ]);
    var endLoc_000 = Base$GclAtom.Pos.translateBy(0, -2, end_);
    var endLoc = /* Loc */Caml_chrome_debugger.simpleVariant("Loc", [
        endLoc_000,
        end_
      ]);
    var trim = function (s) {
      if (Rebase.$$String.length(s) > 77) {
        return Rebase.$$String.sub(0, 73, s) + " ...";
      } else {
        return s;
      }
    };
    var pre = trim(Curry._1(Syntax$GclAtom.Pred.toString, spec.pre));
    var post = trim(Curry._1(Syntax$GclAtom.Pred.toString, spec.post));
    var isQQ = pre === post;
    return Rebase.$$Array.fromList(Js_list.flatten(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                      overlaySpec(isQQ ? "" : pre)(startLoc, editor),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          overlaySpec(isQQ ? "" : post)(endLoc, editor),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                  markLineSpecSoft(startLoc, editor),
                                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                      markLineSpecSoft(endLoc, editor),
                                      /* [] */0
                                    ])
                                ]),
                              /* [] */0
                            ])
                        ])
                    ])));
  } else {
    return [];
  }
}

function markSite(site, specifications, editor) {
  var loc = Curry._2(Response$GclAtom.$$Error.Site.toLoc, site, specifications);
  return Rebase.$$Array.fromList(Js_list.flatten(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    overlayError(loc, editor),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            mark("line-number", "line-number-error", loc, editor),
                            /* [] */0
                          ]),
                        /* [] */0
                      ])
                  ])));
}

function markLink(param, param$1) {
  return mark("highlight", "highlight-link", param, param$1);
}

exports.mark = mark;
exports.markLineSpecSoft = markLineSpecSoft;
exports.markLineSpecHard = markLineSpecHard;
exports.overlay = overlay;
exports.overlaySpec = overlaySpec;
exports.overlayError = overlayError;
exports.markSpec = markSpec;
exports.markSite = markSite;
exports.markLink = markLink;
/* Base-GclAtom Not a pure module */
