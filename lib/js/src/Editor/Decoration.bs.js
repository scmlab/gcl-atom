// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Expr$GclAtom = require("../View/Expr.bs.js");
var Decoder$GclAtom = require("../GCL/Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "Global" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Global */Caml_chrome_debugger.variant("Global", 0, [Decoder$GclAtom.range(json)]);
                          })]);
          case "Local" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Local */Caml_chrome_debugger.variant("Local", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Decoder$GclAtom.range, Json_decode.$$int, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toRange(site, specifications) {
  if (site.tag) {
    var i = site[1];
    var range = site[0];
    var specs = Rebase.$$Array.filter((function (spec) {
            return spec[/* id */0] === i;
          }), specifications);
    return Rebase.$$Option.mapOr((function (spec) {
                  return range.translate(spec[/* range */4].start, spec[/* range */4].start).translate(new Atom.Point(1, 0), new Atom.Point(1, 0));
                }), range, Rebase.$$Array.get(specs, 0));
  } else {
    return site[0];
  }
}

function toString(site) {
  var rangeToString = function (range) {
    return String(range.start.row) + (":" + (String(range.start.column) + ("-" + (String(range.end.row) + (":" + String(range.end.column))))));
  };
  if (site.tag) {
    return "at " + (rangeToString(site[0]) + (" in #" + String(site[1])));
  } else {
    return "at " + rangeToString(site[0]);
  }
}

var Site = {
  decode: decode,
  toRange: toRange,
  toString: toString
};

function mark(type_, class_, range, editor) {
  var marker = editor.markBufferRange(range);
  var option = {
    type: type_,
    class: class_
  };
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            editor.decorateMarker(marker, option),
            /* [] */0
          ]);
}

function markLineSpecSoft(param, param$1) {
  return mark("highlight", "highlight-spec-soft", param, param$1);
}

function markLineSpecHard(param, param$1) {
  return mark("highlight", "highlight-spec-hard", param, param$1);
}

function overlay(text, class_, tail, translation, range, editor) {
  var element = document.createElement("div");
  element.innerHTML = text;
  element.classList.add(class_);
  var top = (translation[0] - 1 | 0) * 1.5;
  element.setAttribute("style", "left: " + (String(translation[1]) + ("ex; top: " + (top.toString() + "em"))));
  var marker = editor.markBufferRange(range);
  var option = {
    type: "overlay",
    item: element,
    position: tail ? "tail" : "head"
  };
  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
            editor.decorateMarker(marker, option),
            /* [] */0
          ]);
}

function overlaySpec(text) {
  var partial_arg = /* tuple */[
    0,
    1
  ];
  return (function (param, param$1) {
      return overlay(text, "overlay-spec-text", false, partial_arg, param, param$1);
    });
}

function overlayError(range, editor) {
  var length = editor.getTextInBufferRange(range).length;
  var text = "&nbsp;".repeat(length);
  return overlay(text, "overlay-error", true, /* tuple */[
              0,
              0
            ], range, editor);
}

function markSpec(spec, editor) {
  var start = spec[/* range */4].start;
  var start$1 = new Atom.Range(start, start.translate(new Atom.Point(0, 2)));
  var end_ = spec[/* range */4].end;
  var end_$1 = new Atom.Range(end_.translate(new Atom.Point(0, -2)), end_);
  var trim = function (s) {
    if (Rebase.$$String.length(s) > 77) {
      return Rebase.$$String.sub(0, 73, s) + " ...";
    } else {
      return s;
    }
  };
  var pre = trim(Expr$GclAtom.toString(spec[/* pre */2]));
  var post = trim(Expr$GclAtom.toString(spec[/* post */3]));
  return Rebase.$$Array.fromList(Js_list.flatten(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    overlaySpec(pre)(start$1, editor),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        overlaySpec(post)(end_$1, editor),
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            markLineSpecSoft(end_$1, editor),
                            /* [] */0
                          ])
                      ])
                  ])));
}

function markSite(site, specifications, editor) {
  var range = toRange(site, specifications);
  return Rebase.$$Array.fromList(Js_list.flatten(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                    overlayError(range, editor),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        mark("line-number", "line-number-error", range, editor),
                        /* [] */0
                      ])
                  ])));
}

exports.Site = Site;
exports.mark = mark;
exports.markLineSpecSoft = markLineSpecSoft;
exports.markLineSpecHard = markLineSpecHard;
exports.overlay = overlay;
exports.overlaySpec = overlaySpec;
exports.overlayError = overlayError;
exports.markSpec = markSpec;
exports.markSite = markSite;
/* decode Not a pure module */
