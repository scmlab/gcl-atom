// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Panel$GclAtom = require("../View/Panel.bs.js");
var Types$GclAtom = require("../Types.bs.js");
var Decoration$GclAtom = require("./Decoration.bs.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function make(param) {
  var containers = Rebase.$$Array.filter((function (elem) {
          return elem.className === "gcl-panel-container";
        }), Rebase.$$Array.flatMap((function (xs) {
              return Rebase.$$Array.filterMap(Webapi__Dom__HtmlElement.ofNode, Array.prototype.slice.call(xs.childNodes));
            }), Rebase.$$Array.map((function (prim) {
                  return atom.views.getView(prim);
                }), atom.workspace.getBottomPanels())));
  var match = Rebase.$$Array.get(containers, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("gcl-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  }
}

var PanelContainer = {
  make: make
};

function make$1(editor) {
  var container = make(/* () */0);
  atom.views.getView(editor).classList.add("gcl");
  var element = document.createElement("article");
  element.classList.add("gcl-panel");
  var id = "gcl:" + String(editor.id);
  element.id = id;
  container.appendChild(element);
  var channels = Curry._1(Types$GclAtom.View.Channels.make, /* () */0);
  var component = React.createElement(Panel$GclAtom.make, {
        channels: channels
      });
  ReactDom.render(component, element);
  var linkDict = { };
  var delete_ = function (id){{delete linkDict[id]}};
  Curry._1(channels[/* link */4][/* on */3], (function (param) {
          if (param.tag) {
            var key = param[0].toString();
            Rebase.$$Option.forEach((function (prim) {
                    prim.destroy();
                    return /* () */0;
                  }), Js_dict.get(linkDict, key));
            return delete_(key);
          } else {
            var range = param[0];
            linkDict[range.toString()] = Decoration$GclAtom.markLink(range, editor);
            return /* () */0;
          }
        }));
  return Curry._1(Types$GclAtom.View.Interface.make, channels);
}

function destroy(editor) {
  var id = "gcl:" + String(editor.id);
  Rebase.$$Option.forEach((function (element) {
          ReactDom.unmountComponentAtNode(element);
          element.remove();
          return /* () */0;
        }), Caml_option.nullable_to_opt(document.getElementById(id)));
  atom.views.getView(editor).classList.remove("gcl");
  return /* () */0;
}

exports.PanelContainer = PanelContainer;
exports.make = make$1;
exports.destroy = destroy;
/* react Not a pure module */
