// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var ReactDom = require("react-dom");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Base2$GclAtom = require("../GCL/Base2.bs.js");
var Panel$GclAtom = require("../View/Panel.bs.js");
var Types$GclAtom = require("../Types.bs.js");
var View$Guacamole = require("guacamole/lib/js/src/View.bs.js");
var Decoration$GclAtom = require("./Decoration.bs.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function make(param) {
  var containers = Belt_Array.keep(Belt_Array.concatMany(Belt_Array.map(Belt_Array.map(atom.workspace.getBottomPanels(), (function (prim) {
                      return atom.views.getView(prim);
                    })), (function (xs) {
                  return Belt_Array.keepMap(Array.prototype.slice.call(xs.childNodes), Webapi__Dom__HtmlElement.ofNode);
                }))), (function (elem) {
          return elem.className === "gcl-panel-container";
        }));
  var match = Belt_Array.get(containers, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("gcl-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  }
}

function add(container, element) {
  container.appendChild(element);
  return /* () */0;
}

var PanelContainer = {
  make: make,
  add: add
};

function make$1(editor) {
  var container = make(/* () */0);
  atom.views.getView(editor).classList.add("gcl");
  var element = document.createElement("article");
  element.setAttribute("tabIndex", "-1");
  element.classList.add("gcl-panel");
  element.classList.add("native-key-bindings");
  container.appendChild(element);
  var channels = Curry._1(Types$GclAtom.View.Channels.make, /* () */0);
  var events = Curry._1(Types$GclAtom.View.Events.make, /* () */0);
  var component = React.createElement(Panel$GclAtom.make, {
        channels: channels,
        events: events
      });
  ReactDom.render(component, element);
  var linkDict = { };
  var delete_ = (function (id) {delete linkDict[id]});
  Curry._1(events.onLink.on, (function (param) {
          switch (param.tag | 0) {
            case /* MouseOver */0 :
                var loc = param[0];
                var key = View$Guacamole.Loc.toString(loc);
                linkDict[key] = Decoration$GclAtom.markLink(loc, editor);
                return /* () */0;
            case /* MouseOut */1 :
                var key$1 = View$Guacamole.Loc.toString(param[0]);
                Belt_Option.forEach(Js_dict.get(linkDict, key$1), (function (prim) {
                        prim.destroy();
                        return /* () */0;
                      }));
                return delete_(key$1);
            case /* MouseClick */2 :
                var range = Base2$GclAtom.Loc.toRange(param[0]);
                editor.setSelectedScreenRange(range);
                return /* () */0;
            
          }
        }));
  return Types$GclAtom.View.make(editor, element, channels, events);
}

function Impl(Editor) {
  var make$2 = function (param, editor) {
    var view = make$1(editor);
    Types$GclAtom.View.send(view, /* Show */0);
    return view;
  };
  var destroy = function (view) {
    ReactDom.unmountComponentAtNode(view.element);
    view.element.remove();
    atom.views.getView(view.editor).classList.remove("gcl");
    return /* () */0;
  };
  var show = function (view) {
    return Types$GclAtom.View.send(view, /* Show */0);
  };
  var hide = function (view) {
    return Types$GclAtom.View.send(view, /* Hide */1);
  };
  return {
          make: make$2,
          destroy: destroy,
          show: show,
          hide: hide
        };
}

exports.PanelContainer = PanelContainer;
exports.make = make$1;
exports.Impl = Impl;
/* react Not a pure module */
