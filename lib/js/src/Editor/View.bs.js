// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var ReactDom = require("react-dom");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Event$Guacamole = require("guacamole/lib/js/src/Util/Event.bs.js");
var Panel$Guacamole = require("guacamole/lib/js/src/View/Panel.bs.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function make(param) {
  var containers = Belt_Array.keep(Belt_Array.concatMany(Belt_Array.map(Belt_Array.map(atom.workspace.getBottomPanels(), (function (prim) {
                      return atom.views.getView(prim);
                    })), (function (xs) {
                  return Belt_Array.keepMap(Array.prototype.slice.call(xs.childNodes), Webapi__Dom__HtmlElement.ofNode);
                }))), (function (elem) {
          return elem.className === "gcl-panel-container";
        }));
  var match = Belt_Array.get(containers, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("gcl-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  }
}

function add(container, element) {
  container.appendChild(element);
  return /* () */0;
}

var PanelContainer = {
  make: make,
  add: add
};

function send(view, request) {
  Curry._1(view.onRequest.emit, request);
  return $$Promise.resolved(true);
}

function recv(view, callback) {
  view.subscriptions.push(Curry._1(view.onResponse.on, callback));
  return new Atom.Disposable((function (param) {
                return /* () */0;
              }));
}

function show(view) {
  send(view, /* Show */0);
  return /* () */0;
}

function hide(view) {
  send(view, /* Hide */1);
  return /* () */0;
}

function make$1(_context, editor) {
  var onRequest = Event$Guacamole.make(/* () */0);
  var onResponse = Event$Guacamole.make(/* () */0);
  var container = make(/* () */0);
  atom.views.getView(editor).classList.add("gcl");
  var element = document.createElement("article");
  element.setAttribute("tabIndex", "-1");
  element.classList.add("gcl-panel");
  element.classList.add("native-key-bindings");
  container.appendChild(element);
  ReactDom.render(React.createElement(Panel$Guacamole.make, {
            editorType: /* Atom */0,
            onRequest: onRequest,
            onResponse: onResponse
          }), element);
  var view_subscriptions = [];
  var view = {
    editor: editor,
    element: element,
    subscriptions: view_subscriptions,
    onRequest: onRequest,
    onResponse: onResponse
  };
  send(view, /* Show */0);
  return view;
}

function destroy(view) {
  ReactDom.unmountComponentAtNode(view.element);
  view.element.remove();
  atom.views.getView(view.editor).classList.remove("gcl");
  return Belt_Array.forEach(view.subscriptions, (function (destructor) {
                return Curry._1(destructor, /* () */0);
              }));
}

exports.PanelContainer = PanelContainer;
exports.send = send;
exports.recv = recv;
exports.show = show;
exports.hide = hide;
exports.make = make$1;
exports.destroy = destroy;
/* atom Not a pure module */
