// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function fields(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (tag) {
                    var match = Curry._1(decoder, tag);
                    if (match.tag) {
                      return match[0];
                    } else {
                      var d = match[0];
                      return (function (param) {
                          return Json_decode.field("contents", d, param);
                        });
                    }
                  }), (function (param) {
                    return Json_decode.field("tag", Json_decode.string, param);
                  }), param);
    });
}

function point(json) {
  return new Atom.Point(Json_decode.field("line", Json_decode.$$int, json) - 1 | 0, Json_decode.field("column", Json_decode.$$int, json) - 1 | 0);
}

var range = fields((function (param) {
        if (param === "Loc") {
          return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                        var x = Json_decode.field("start", point, json);
                        var y = Json_decode.field("end", point, json);
                        return new Atom.Range(new Atom.Point(x.row, x.column), new Atom.Point(y.row, y.column));
                      })]);
        } else {
          return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                        return new Atom.Range(new Atom.Point(0, 0), new Atom.Point(0, 0));
                      })]);
        }
      }));

var syntaxError = fields((function (tag) {
        switch (tag) {
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* ExcessBound */Caml_chrome_debugger.variant("ExcessBound", 2, [Curry._1(range, json)]);
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* MissingAssertion */Caml_chrome_debugger.variant("MissingAssertion", 1, [Curry._1(range, json)]);
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* MissingBound */Caml_chrome_debugger.variant("MissingBound", 0, [Curry._1(range, json)]);
                          })]);
          case "MissingPostcondition" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* MissingPostcondition */0;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var response = fields((function (tag) {
        switch (tag) {
          case "OK" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* OK */0;
                          })]);
          case "ParseError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (a) {
                                          return /* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [a]);
                                        }), (function (param) {
                                          return Json_decode.array((function (param) {
                                                        return Json_decode.pair(point, Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "ProofObligations" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 2, [Json_decode.array(Json_decode.string, json)]);
                          })]);
          case "SyntaxError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* SyntaxError */Caml_chrome_debugger.variant("SyntaxError", 1, [Curry._1(syntaxError, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var Decode = {
  fields: fields,
  point: point,
  range: range,
  proofObligation: Json_decode.string,
  syntaxError: syntaxError,
  response: response
};

function parse(data) {
  return Rebase.$$Option.map(response, Json.parse(data));
}

var test = Json.parse;

exports.Decode = Decode;
exports.parse = parse;
exports.test = test;
/* range Not a pure module */
