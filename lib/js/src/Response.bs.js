// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Body$GclAtom = require("./View/Body.bs.js");
var Pred$GclAtom = require("./View/Pred.bs.js");
var Decoder$GclAtom = require("./Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.fields((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* DigHole */Caml_chrome_debugger.variant("DigHole", 3, [Decoder$GclAtom.range(json)]);
                          })]);
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* ExcessBound */Caml_chrome_debugger.variant("ExcessBound", 2, [Decoder$GclAtom.range(json)]);
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* MissingAssertion */Caml_chrome_debugger.variant("MissingAssertion", 1, [Decoder$GclAtom.range(json)]);
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* MissingBound */Caml_chrome_debugger.variant("MissingBound", 0, [Decoder$GclAtom.range(json)]);
                          })]);
          case "MissingPostcondition" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* MissingPostcondition */0;
                          })]);
          case "Panic" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Panic */Caml_chrome_debugger.variant("Panic", 4, [Json_decode.string(json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var TransformError = {
  decode: decode
};

var decode$1 = Decoder$GclAtom.fields((function (tag) {
        switch (tag) {
          case "LexicalError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* LexicalError */Caml_chrome_debugger.variant("LexicalError", 0, [Decoder$GclAtom.point(json)]);
                          })]);
          case "SyntacticError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (pairs) {
                                          return /* SyntacticError */Caml_chrome_debugger.variant("SyntacticError", 1, [pairs]);
                                        }), (function (param) {
                                          return Json_decode.array((function (param) {
                                                        return Json_decode.pair(Decoder$GclAtom.point, Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "TransformError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* TransformError */Caml_chrome_debugger.variant("TransformError", 2, [Curry._1(decode, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$Error = {
  TransformError: TransformError,
  decode: decode$1
};

function decodeHardness(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "Hard" :
                      return /* Hard */0;
                  case "Soft" :
                      return /* Soft */1;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

function decode$2(json) {
  return /* Specification */Caml_chrome_debugger.simpleVariant("Specification", [
            Json_decode.field("specHardness", decodeHardness, json),
            Json_decode.field("specPreCond", Pred$GclAtom.decode, json),
            Json_decode.field("specPostCond", Pred$GclAtom.decode, json),
            Json_decode.field("specStartLoc", Decoder$GclAtom.range, json),
            Json_decode.field("specEndLoc", Decoder$GclAtom.range, json)
          ]);
}

var Specification = {
  decodeHardness: decodeHardness,
  decode: decode$2
};

var decode$3 = Decoder$GclAtom.fields((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (e) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 0, [e]);
                                        }), decode$1, param);
                          })]);
          case "OK" :
              var partial_arg = Body$GclAtom.ProofObligation.decode;
              var partial_arg$1 = function (param) {
                return Json_decode.array(partial_arg, param);
              };
              var partial_arg$2 = function (param) {
                return Json_decode.pair(partial_arg$1, (function (param) {
                              return Json_decode.array(decode$2, param);
                            }), param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* OK */Caml_chrome_debugger.variant("OK", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), partial_arg$2, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

exports.$$Error = $$Error;
exports.Specification = Specification;
exports.decode = decode$3;
/* decode Not a pure module */
