// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function pos(json) {
  return /* record */Caml_chrome_debugger.record([
            "filepath",
            "offset",
            "line",
            "column"
          ], [
            Json_decode.field("filepath", Json_decode.string, json),
            Json_decode.field("offset", Json_decode.$$int, json),
            Json_decode.field("line", Json_decode.$$int, json),
            Json_decode.field("column", Json_decode.$$int, json)
          ]);
}

function ok(param) {
  return /* OK */0;
}

function parseErrorPair(param) {
  return Json_decode.map((function (param) {
                var x = param[0];
                return /* tuple */[
                        new Atom.Point(x[/* line */2] - 1 | 0, x[/* column */3]),
                        param[1]
                      ];
              }), (function (param) {
                return Json_decode.pair(pos, Json_decode.string, param);
              }), param);
}

function parseError(param) {
  return Json_decode.map((function (a) {
                return /* ParseError */Caml_chrome_debugger.simpleVariant("ParseError", [a]);
              }), (function (param) {
                return Json_decode.array(parseErrorPair, param);
              }), param);
}

function response(param) {
  return Json_decode.andThen((function (param) {
                switch (param) {
                  case "OK" :
                      return ok;
                  case "ParseError" :
                      return (function (param) {
                          return Json_decode.field("contents", parseError, param);
                        });
                  default:
                    return ok;
                }
              }), (function (param) {
                return Json_decode.field("tag", Json_decode.string, param);
              }), param);
}

var Decode = {
  pos: pos,
  ok: ok,
  parseErrorPair: parseErrorPair,
  parseError: parseError,
  response: response
};

function parse(data) {
  return Rebase.$$Option.map(response, Json.parse(data));
}

var test = Json.parse;

exports.Decode = Decode;
exports.parse = parse;
exports.test = test;
/* atom Not a pure module */
