// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function point(json) {
  return new Atom.Point(Json_decode.field("line", Json_decode.$$int, json) - 1 | 0, Json_decode.field("column", Json_decode.$$int, json) - 1 | 0);
}

function range(param) {
  return Json_decode.andThen((function (param) {
                if (param === "Loc") {
                  return (function (param) {
                      return Json_decode.field("contents", (function (json) {
                                    var x = Json_decode.field("start", point, json);
                                    var y = Json_decode.field("end", point, json);
                                    return new Atom.Range(new Atom.Point(x.row, x.column), new Atom.Point(y.row, y.column));
                                  }), param);
                    });
                } else {
                  return (function (param) {
                      return new Atom.Range(new Atom.Point(0, 0), new Atom.Point(0, 0));
                    });
                }
              }), (function (param) {
                return Json_decode.field("tag", Json_decode.string, param);
              }), param);
}

function ok(param) {
  return /* OK */0;
}

function parseErrorPair(param) {
  return Json_decode.pair(point, Json_decode.string, param);
}

function parseError(param) {
  return Json_decode.map((function (a) {
                return /* ParseError */Caml_chrome_debugger.variant("ParseError", 0, [a]);
              }), (function (param) {
                return Json_decode.array(parseErrorPair, param);
              }), param);
}

function syntaxError(param) {
  return Json_decode.andThen((function (tag) {
                switch (tag) {
                  case "ExcessBound" :
                      return (function (param) {
                          return Json_decode.field("contents", (function (json) {
                                        return /* ExcessBound */Caml_chrome_debugger.variant("ExcessBound", 2, [range(json)]);
                                      }), param);
                        });
                  case "MissingAssertion" :
                      return (function (param) {
                          return Json_decode.field("contents", (function (json) {
                                        return /* MissingAssertion */Caml_chrome_debugger.variant("MissingAssertion", 1, [range(json)]);
                                      }), param);
                        });
                  case "MissingBound" :
                      return (function (param) {
                          return Json_decode.field("contents", (function (json) {
                                        return /* MissingBound */Caml_chrome_debugger.variant("MissingBound", 0, [range(json)]);
                                      }), param);
                        });
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), (function (param) {
                return Json_decode.field("tag", Json_decode.string, param);
              }), param);
}

function response(raw) {
  return Json_decode.andThen((function (param) {
                switch (param) {
                  case "OK" :
                      return ok;
                  case "ParseError" :
                      return (function (param) {
                          return Json_decode.field("contents", parseError, param);
                        });
                  case "SyntaxError" :
                      return (function (param) {
                          return Json_decode.field("contents", (function (json) {
                                        return /* SyntaxError */Caml_chrome_debugger.variant("SyntaxError", 1, [syntaxError(json)]);
                                      }), param);
                        });
                  default:
                    return (function (param) {
                        return /* UnknownResponse */Caml_chrome_debugger.variant("UnknownResponse", 2, [raw]);
                      });
                }
              }), (function (param) {
                return Json_decode.field("tag", Json_decode.string, param);
              }), raw);
}

var Decode = {
  point: point,
  range: range,
  ok: ok,
  parseErrorPair: parseErrorPair,
  parseError: parseError,
  syntaxError: syntaxError,
  response: response
};

function parse(data) {
  return Rebase.$$Option.map(response, Json.parse(data));
}

var test = Json.parse;

exports.Decode = Decode;
exports.parse = parse;
exports.test = test;
/* atom Not a pure module */
