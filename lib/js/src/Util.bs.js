// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function manyIn(elem, $staropt$star) {
  var props = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : { };
  var partial_arg = Caml_option.some(props);
  return (function (param) {
      return Caml_splice_call.spliceApply(React.createElement, [
                  elem,
                  partial_arg !== undefined ? Caml_option.valFromOption(partial_arg) : undefined,
                  param
                ]);
    });
}

var partial_arg = React.Fragment;

function manyInFragment(param, param$1) {
  return Caml_splice_call.spliceApply(React.createElement, [
              partial_arg,
              param !== undefined ? Caml_option.valFromOption(param) : undefined,
              param$1
            ]);
}

function sepBy(sep, xs) {
  var match = Rebase.$$Array.length(xs);
  if (match !== 0) {
    return Rebase.$$Array.reduce((function (xs, x) {
                  return React.createElement(React.Fragment, undefined, xs, sep, x);
                }), React.createElement(React.Fragment, undefined), xs);
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(param) {
  if (param) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  manyIn: manyIn,
  manyInFragment: manyInFragment,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

function toString(_e) {
  return (_e.toString());
}

var JsError = {
  toString: toString
};

function every(xs) {
  return Rebase.$$Array.reduce((function (acc, x) {
                if (!acc.tag) {
                  var xs = acc[0];
                  if (!x.tag) {
                    xs.push(x[0]);
                    return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [xs]);
                  }
                  
                }
                if (x.tag) {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [x[0]]);
                } else {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [acc[0]]);
                }
              }), /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* array */[]]), xs);
}

var Result = {
  every: every
};

exports.React = React$1;
exports.JsError = JsError;
exports.Result = Result;
/* partial_arg Not a pure module */
