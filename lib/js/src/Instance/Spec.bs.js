// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Async$GclAtom = require("../Util/Async.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function fromCursorPosition(instance) {
  var cursor = instance[/* editor */0].getCursorBufferPosition();
  var smallestHole = /* record */Caml_chrome_debugger.record(["contents"], [undefined]);
  Rebase.$$Array.forEach((function (spec) {
          var match = smallestHole[0];
          if (match !== undefined && !match[/* range */4].containsRange(spec[/* range */4])) {
            return 0;
          } else {
            smallestHole[0] = spec;
            return /* () */0;
          }
        }), Rebase.$$Array.filter((function (spec) {
              return spec[/* range */4].containsPoint(cursor);
            }), instance[/* specifications */5]));
  return smallestHole[0];
}

function getPayloadRange(spec) {
  var start = new Atom.Point(1, 0).translate(spec[/* range */4].start);
  var end_ = new Atom.Point(0, -2).translate(spec[/* range */4].end);
  return new Atom.Range(start, end_);
}

function getPayload(spec, instance) {
  var innerRange = getPayloadRange(spec);
  return instance[/* editor */0].getBuffer().getTextInRange(innerRange);
}

function resolve(i, instance) {
  var specs = Rebase.$$Array.filter((function (spec) {
          return spec[/* id */0] === i;
        }), instance[/* specifications */5]);
  Rebase.$$Option.forEach((function (spec) {
          var startingRow = spec[/* range */4].start.row;
          var endingRow = spec[/* range */4].end.row;
          instance[/* editor */0].getBuffer().deleteRow(endingRow);
          instance[/* editor */0].getBuffer().deleteRow(startingRow);
          return /* () */0;
        }), Rebase.$$Array.get(specs, 0));
  return Async$GclAtom.resolve(/* () */0);
}

exports.fromCursorPosition = fromCursorPosition;
exports.getPayloadRange = getPayloadRange;
exports.getPayload = getPayload;
exports.resolve = resolve;
/* atom Not a pure module */
