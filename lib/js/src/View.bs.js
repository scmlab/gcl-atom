// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Webapi = require("bs-webapi/lib/js/src/Webapi.js");
var ReactDom = require("react-dom");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Webapi__Dom = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom.js");
var Panel$GclAtom = require("./View/Panel.bs.js");
var Channel$GclAtom = require("./Util/Channel.bs.js");
var Channels$GclAtom = require("./View/Channels.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Webapi__Dom__HtmlElement = require("bs-webapi/lib/js/src/Webapi/Webapi__Dom/Webapi__Dom__HtmlElement.js");

function make(param) {
  var containers = Rebase.$$Array.filter((function (elem) {
          return elem.className === "gcl-panel-container";
        }), Rebase.$$Array.flatMap((function (xs) {
              return Rebase.$$Array.filterMap(Webapi__Dom__HtmlElement.ofNode, Array.prototype.slice.call(xs.childNodes));
            }), Rebase.$$Array.map((function (prim) {
                  return atom.views.getView(prim);
                }), atom.workspace.getBottomPanels())));
  var match = Rebase.$$Array.get(containers, 0);
  if (match !== undefined) {
    return Caml_option.valFromOption(match);
  } else {
    var panelContainer = document.createElement("article");
    panelContainer.classList.add("gcl-panel-container");
    atom.workspace.addBottomPanel({
          item: panelContainer,
          priority: 0,
          visible: true
        });
    return panelContainer;
  }
}

var PanelContainer = {
  make: make
};

function make$1(channels) {
  var partial_arg = channels[/* setActivation */1];
  var partial_arg$1 = channels[/* setHeader */2];
  var partial_arg$2 = channels[/* setBody */3];
  return /* record */Caml_chrome_debugger.record([
            "setActivation",
            "setHeader",
            "setBody"
          ], [
            (function (param) {
                return Channel$GclAtom.sendTo(partial_arg, param);
              }),
            (function (param) {
                return Channel$GclAtom.sendTo(partial_arg$1, param);
              }),
            (function (param) {
                return Channel$GclAtom.sendTo(partial_arg$2, param);
              })
          ]);
}

var Interface = {
  make: make$1
};

function make$2(editor) {
  var container = make(/* () */0);
  var element = document.createElement("article");
  element.classList.add("gcl-panel");
  var id = "gcl:" + String(editor.id);
  element.id = id;
  container.appendChild(element);
  var channels = Channels$GclAtom.make(/* () */0);
  var component = React.createElement(Panel$GclAtom.make, {
        channels: channels
      });
  ReactDom.render(component, element);
  return make$1(channels);
}

function destroy(editor) {
  var id = "gcl:" + String(editor.id);
  return Rebase.$$Option.forEach((function (element) {
                ReactDom.unmountComponentAtNode(element);
                element.remove();
                return /* () */0;
              }), Caml_option.nullable_to_opt(document.getElementById(id)));
}

exports.PanelContainer = PanelContainer;
exports.Interface = Interface;
exports.make = make$2;
exports.destroy = destroy;
/* react Not a pure module */
