// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function sum(decoder) {
  return (function (param) {
      return Json_decode.andThen((function (tag) {
                    var match = Curry._1(decoder, tag);
                    if (match.tag) {
                      return match[0];
                    } else {
                      var d = match[0];
                      return (function (param) {
                          return Json_decode.field("contents", d, param);
                        });
                    }
                  }), (function (param) {
                    return Json_decode.field("tag", Json_decode.string, param);
                  }), param);
    });
}

function maybe(decoder) {
  return sum((function (param) {
                if (param === "Just") {
                  return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                                return Caml_option.some(Curry._1(decoder, json));
                              })]);
                } else {
                  return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                                return ;
                              })]);
                }
              }));
}

var Decode = {
  sum: sum,
  maybe: maybe
};

function manyIn(elem, $staropt$star) {
  var props = $staropt$star !== undefined ? Caml_option.valFromOption($staropt$star) : { };
  var partial_arg = Caml_option.some(props);
  return (function (param) {
      return Caml_splice_call.spliceApply(React.createElement, [
                  elem,
                  partial_arg !== undefined ? Caml_option.valFromOption(partial_arg) : undefined,
                  param
                ]);
    });
}

var partial_arg = React.Fragment;

function manyInFragment(param, param$1) {
  return Caml_splice_call.spliceApply(React.createElement, [
              partial_arg,
              param !== undefined ? Caml_option.valFromOption(param) : undefined,
              param$1
            ]);
}

function sepBy$prime(sep, item) {
  if (item) {
    var xs = item[1];
    var x = item[0];
    if (xs) {
      var arg = function (param) {
        return manyIn("span", param);
      };
      return (function (eta) {
                  return Curry._1(arg(undefined), eta);
                })(Rebase.$$Array.fromList(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        x,
                        Rebase.List.map((function (i) {
                                return React.createElement(React.Fragment, undefined, sep, i);
                              }), xs)
                      ])));
    } else {
      return x;
    }
  } else {
    return React.createElement(React.Fragment, undefined);
  }
}

function sepBy(sep) {
  return Curry._2(Rebase.Fn.$great$great, Rebase.List.fromArray, (function (param) {
                return sepBy$prime(sep, param);
              }));
}

function enclosedBy(front, back, item) {
  return React.createElement(React.Fragment, undefined, front, " ", item, " ", back);
}

function when_(p, className) {
  if (p) {
    return " " + className;
  } else {
    return "";
  }
}

function showWhen(param) {
  if (param) {
    return "";
  } else {
    return " hidden";
  }
}

var React$1 = {
  manyIn: manyIn,
  manyInFragment: manyInFragment,
  sepBy$prime: sepBy$prime,
  sepBy: sepBy,
  enclosedBy: enclosedBy,
  when_: when_,
  showWhen: showWhen
};

function toString(_e) {
  return (_e.toString());
}

var JsError = {
  toString: toString
};

function every(xs) {
  return Rebase.$$Array.reduce((function (acc, x) {
                if (!acc.tag) {
                  var xs = acc[0];
                  if (!x.tag) {
                    xs.push(x[0]);
                    return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [xs]);
                  }
                  
                }
                if (x.tag) {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [x[0]]);
                } else {
                  return /* Error */Caml_chrome_debugger.variant("Error", 1, [acc[0]]);
                }
              }), /* Ok */Caml_chrome_debugger.variant("Ok", 0, [/* array */[]]), xs);
}

var Result = {
  every: every
};

exports.Decode = Decode;
exports.React = React$1;
exports.JsError = JsError;
exports.Result = Result;
/* partial_arg Not a pure module */
