// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Decoder$GclAtom = require("../Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function decode(json) {
  return Decoder$GclAtom.sum((function (tag) {
                  switch (tag) {
                    case "TArray" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Array */Caml_chrome_debugger.variant("Array", 0, [x]);
                                                  }), decode, param);
                                    })]);
                    case "TBool" :
                        return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                                      return /* Bool */1;
                                    })]);
                    case "TFun" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Func */Caml_chrome_debugger.variant("Func", 1, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode, decode, param);
                                                  }), param);
                                    })]);
                    case "TInt" :
                        return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                                      return /* Int */0;
                                    })]);
                    case "TVar" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 2, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function toString(param) {
  if (typeof param === "number") {
    if (param === /* Int */0) {
      return "Int";
    } else {
      return "Bool";
    }
  } else {
    switch (param.tag | 0) {
      case /* Array */0 :
          return "Array " + toString(param[0]);
      case /* Func */1 :
          return toString(param[0]) + (" -> " + toString(param[1]));
      case /* Var */2 :
          return "Var " + String(param[0]);
      
    }
  }
}

exports.decode = decode;
exports.toString = toString;
/* Decoder-GclAtom Not a pure module */
