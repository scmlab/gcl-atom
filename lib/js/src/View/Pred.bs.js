// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Expr$GclAtom = require("./Expr.bs.js");
var Link$GclAtom = require("./Link.bs.js");
var Util$GclAtom = require("../Util.bs.js");

function Pred$Marker(Props) {
  var kind = Props.kind;
  var sort = Props.sort;
  var text = Props.text;
  var match = Props.loc;
  var loc = match !== undefined ? match : /* NoLoc */0;
  var children = Props.children;
  var kind$1 = kind !== undefined ? (
      kind ? " marker-assertion" : " marker-guard"
    ) : "";
  var sort$1;
  if (sort !== undefined) {
    switch (sort) {
      case /* If */0 :
          sort$1 = " marker-if";
          break;
      case /* Loop */1 :
          sort$1 = " marker-loop";
          break;
      case /* Bnd */2 :
          sort$1 = " marker-bound";
          break;
      
    }
  } else {
    sort$1 = "";
  }
  return React.createElement("div", {
              className: "marker" + (sort$1 + kind$1)
            }, React.createElement("div", {
                  className: "marker-content"
                }, children), React.createElement(Link$GclAtom.make, {
                  loc: loc,
                  children: null
                }, React.createElement("div", {
                      className: "marker-line" + (sort$1 + kind$1)
                    }), text !== undefined ? React.createElement("div", {
                        className: "marker-text" + (sort$1 + kind$1)
                      }, text) : React.createElement(React.Fragment, undefined)));
}

var Marker = {
  make: Pred$Marker
};

function make(Props) {
  var value = Props.value;
  switch (value.tag | 0) {
    case /* Constant */0 :
        return React.createElement(Pred$Marker, {
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* Bound */1 :
        return React.createElement(Pred$Marker, {
                    sort: /* Bnd */2,
                    text: "bound",
                    loc: value[1],
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* Assertion */2 :
        return React.createElement(Pred$Marker, {
                    kind: /* Assertion */1,
                    text: "assertion",
                    loc: value[1],
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* LoopInvariant */3 :
        return React.createElement(Pred$Marker, {
                    kind: /* Assertion */1,
                    sort: /* Loop */1,
                    text: "loop invariant",
                    loc: value[2],
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* GuardIf */4 :
        return React.createElement(Pred$Marker, {
                    kind: /* Guard */0,
                    sort: /* If */0,
                    text: "guard",
                    loc: value[1],
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* GuardLoop */5 :
        return React.createElement(Pred$Marker, {
                    kind: /* Guard */0,
                    sort: /* Loop */1,
                    text: "guard",
                    loc: value[1],
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* Conjunct */6 :
        return Curry._1(Util$GclAtom.React.sepBy(" ∧ "), $$Array.map((function (x) {
                          return React.createElement(make, {
                                      value: x
                                    });
                        }), value[0]));
    case /* Disjunct */7 :
        return Curry._1(Util$GclAtom.React.sepBy(" ∨ "), $$Array.map((function (x) {
                          return React.createElement(make, {
                                      value: x
                                    });
                        }), value[0]));
    case /* Negate */8 :
        return React.createElement(React.Fragment, undefined, "¬ ", React.createElement(make, {
                        value: value[0]
                      }));
    
  }
}

exports.Marker = Marker;
exports.make = make;
/* react Not a pure module */
