// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Decoder$GclAtom = require("../Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.fields((function (tag) {
        switch (tag) {
          case "Eq" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* Eq */0;
                          })]);
          case "GEq" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* GEq */2;
                          })]);
          case "GTh" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* GTh */4;
                          })]);
          case "LEq" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LEq */1;
                          })]);
          case "LTh" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LTh */3;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toString(param) {
  switch (param) {
    case /* Eq */0 :
        return "=";
    case /* LEq */1 :
        return "<=";
    case /* GEq */2 :
        return ">=";
    case /* LTh */3 :
        return ">";
    case /* GTh */4 :
        return "<";
    
  }
}

var BinRel = {
  decode: decode,
  toString: toString
};

function decode$1(json) {
  return Decoder$GclAtom.fields((function (tag) {
                  switch (tag) {
                    case "Conj" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Conj */Caml_chrome_debugger.variant("Conj", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$1, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Disj" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Disj */Caml_chrome_debugger.variant("Disj", 3, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$1, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Hole" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (p) {
                                                    return /* Hole */Caml_chrome_debugger.variant("Hole", 6, [p]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    case "Implies" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Implies */Caml_chrome_debugger.variant("Implies", 1, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$1, decode$1, param);
                                                  }), param);
                                    })]);
                    case "Lit" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (p) {
                                                    return /* Lit */Caml_chrome_debugger.variant("Lit", 5, [p]);
                                                  }), Json_decode.bool, param);
                                    })]);
                    case "Neg" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (p) {
                                                    return /* Neg */Caml_chrome_debugger.variant("Neg", 4, [p]);
                                                  }), decode$1, param);
                                    })]);
                    case "Term" :
                        var partial_arg = Rebase.Fn.id;
                        var partial_arg$1 = Rebase.Fn.id;
                        var partial_arg$2 = function (param) {
                          return Json_decode.tuple3(decode, partial_arg$1, partial_arg, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Term */Caml_chrome_debugger.variant("Term", 0, [
                                                              param[0],
                                                              param[1],
                                                              param[2]
                                                            ]);
                                                  }), partial_arg$2, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function toString$1(param) {
  switch (param.tag | 0) {
    case /* Term */0 :
        return toString(param[0]) + (" " + (JSON.stringify(param[1]) + (" " + JSON.stringify(param[2]))));
    case /* Implies */1 :
        return toString$1(param[0]) + (" → " + toString$1(param[1]));
    case /* Conj */2 :
        return toString$1(param[0]) + (" ⋀ " + toString$1(param[1]));
    case /* Disj */3 :
        return toString$1(param[0]) + (" ⋁ " + toString$1(param[1]));
    case /* Neg */4 :
        return "¬ " + toString$1(param[0]);
    case /* Lit */5 :
        if (param[0]) {
          return "true";
        } else {
          return "false";
        }
    case /* Hole */6 :
        return "?" + String(param[0]);
    
  }
}

exports.BinRel = BinRel;
exports.decode = decode$1;
exports.toString = toString$1;
/* decode Not a pure module */
