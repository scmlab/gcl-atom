// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Expr$GclAtom = require("./Expr.bs.js");
var Util$GclAtom = require("../Util.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function Pred$Marker(Props) {
  var match = Props.kind;
  var kind = match !== undefined ? match : /* Default */0;
  var text = Props.text;
  var children = Props.children;
  var className;
  switch (kind) {
    case /* Default */0 :
        className = "";
        break;
    case /* If */1 :
        className = " marker-if";
        break;
    case /* Loop */2 :
        className = " marker-loop";
        break;
    
  }
  return React.createElement("div", {
              className: "marker"
            }, React.createElement("div", {
                  className: "marker-content"
                }, children), React.createElement("div", {
                  className: "marker-line" + className
                }), text !== undefined ? React.createElement("div", {
                    className: "marker-text" + className
                  }, text) : React.createElement(React.Fragment, undefined));
}

var Marker = {
  make: Pred$Marker
};

function make(Props) {
  var value = Props.value;
  switch (value.tag | 0) {
    case /* Pred */0 :
        return React.createElement(Pred$Marker, {
                    children: React.createElement(Expr$GclAtom.make, {
                          value: value[0]
                        })
                  });
    case /* IfTotalDisj */1 :
        return React.createElement(Pred$Marker, {
                    kind: /* If */1,
                    text: "guards",
                    children: Curry._1(Util$GclAtom.React.sepBy(" ∨ "), $$Array.map((function (x) {
                                return React.createElement(make, {
                                            value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [x])
                                          });
                              }), value[0]))
                  });
    case /* IfBranchConj */2 :
        return React.createElement(Pred$Marker, {
                    kind: /* If */1,
                    text: "invariant",
                    children: null
                  }, React.createElement(make, {
                        value: value[0]
                      }), " ∧ ", React.createElement(make, {
                        value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [value[1]])
                      }));
    case /* LoopTermDecrConj */3 :
        return React.createElement(Pred$Marker, {
                    kind: /* Loop */2,
                    text: "bound & invariant",
                    children: null
                  }, React.createElement(make, {
                        value: value[0]
                      }), " ∧ ", React.createElement(make, {
                        value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [value[1]])
                      }), " ∧ ", React.createElement(make, {
                        value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [value[2]])
                      }));
    case /* LoopTermConj */4 :
        return React.createElement(Pred$Marker, {
                    kind: /* Loop */2,
                    text: "invariant & guards",
                    children: null
                  }, React.createElement(make, {
                        value: value[0]
                      }), " ∧ ", Curry._1(Util$GclAtom.React.sepBy(" ∨ "), $$Array.map((function (x) {
                              return React.createElement(make, {
                                          value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [x])
                                        });
                            }), value[1])));
    case /* LoopIndConj */5 :
        return React.createElement(Pred$Marker, {
                    kind: /* Loop */2,
                    text: "invariant",
                    children: null
                  }, React.createElement(make, {
                        value: value[0]
                      }), " ∧ ", React.createElement(make, {
                        value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [value[1]])
                      }));
    case /* LoopBaseConj */6 :
        return React.createElement(Pred$Marker, {
                    kind: /* Loop */2,
                    text: "invariant & guards",
                    children: null
                  }, React.createElement(make, {
                        value: value[0]
                      }), " ∧ ", Curry._1(Util$GclAtom.React.sepBy(" ∨ "), $$Array.map((function (x) {
                              return React.createElement(make, {
                                          value: /* Pred */Caml_chrome_debugger.variant("Pred", 0, [x])
                                        });
                            }), value[1])));
    
  }
}

exports.Marker = Marker;
exports.make = make;
/* react Not a pure module */
