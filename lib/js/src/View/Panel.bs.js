// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Body$GclAtom = require("./Body.bs.js");
var Hook$GclAtom = require("./Hook.bs.js");
var Link$GclAtom = require("./Link.bs.js");

function Panel(Props) {
  var channels = Props.channels;
  var events = Props.events;
  var match = Hook$GclAtom.useState(/* Loading */0);
  var setHeader = match[1];
  var header = match[0];
  var match$1 = Hook$GclAtom.useState(/* Nothing */0);
  var setBody = match$1[1];
  var match$2 = Hook$GclAtom.useState(false);
  var setActivation = match$2[1];
  var match$3 = Hook$GclAtom.useState(/* WP1 */0);
  var setMode = match$3[1];
  var mode = match$3[0];
  Hook$GclAtom.useChannel((function (x) {
          return $$Promise.resolved(Curry._1(setHeader, x));
        }), channels.setHeader);
  Hook$GclAtom.useChannel((function (x) {
          return $$Promise.resolved(Curry._1(setBody, x));
        }), channels.setBody);
  Hook$GclAtom.useChannel((function (x) {
          return $$Promise.resolved(Curry._1(setActivation, x));
        }), channels.setActivation);
  var onChange = function (param) {
    var newMode = mode ? /* WP1 */0 : /* WP2 */1;
    Curry._1(events.onSetMode.emit, newMode);
    return Curry._1(setMode, newMode);
  };
  var tmp;
  tmp = typeof header === "number" ? React.createElement("div", {
          className: "text-plain"
        }, "Loading ...") : (
      header.tag ? React.createElement("div", {
              className: "text-error"
            }, header[0]) : React.createElement("div", undefined, header[0])
    );
  var headerElem = React.createElement("h2", {
        className: "gcl-header"
      }, tmp, React.createElement("div", {
            className: "gcl-mode"
          }, React.createElement("label", {
                className: "input-label"
              }, React.createElement("input", {
                    className: "input-toggle",
                    checked: mode ? true : false,
                    type: "checkbox",
                    onChange: onChange
                  }), "WP2")));
  return React.createElement(Link$GclAtom.Provider.make, Link$GclAtom.Provider.makeProps(channels.link, React.createElement("section", {
                      className: match$2[0] ? "" : "hidden"
                    }, headerElem, React.createElement(Body$GclAtom.make, {
                          body: match$1[0]
                        })), /* () */0));
}

var make = Panel;

exports.make = make;
/* react Not a pure module */
