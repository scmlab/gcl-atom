// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Util$GclAtom = require("../Util.bs.js");
var Syntax$GclAtom = require("../GCL/Syntax.bs.js");
var Decoder$GclAtom = require("../GCL/Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "AroundAbort" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AroundAbort */Caml_chrome_debugger.variant("AroundAbort", 0, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "AroundSkip" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AroundSkip */Caml_chrome_debugger.variant("AroundSkip", 1, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "AssertGuaranteed" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AssertGuaranteed */Caml_chrome_debugger.variant("AssertGuaranteed", 2, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "AssertSufficient" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AssertSufficient */Caml_chrome_debugger.variant("AssertSufficient", 3, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "Assignment" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* Assignment */Caml_chrome_debugger.variant("Assignment", 4, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "IfBranch" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* IfBranch */Caml_chrome_debugger.variant("IfBranch", 6, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "IfTotal" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* IfTotal */Caml_chrome_debugger.variant("IfTotal", 5, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "LoopBase" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* LoopBase */Caml_chrome_debugger.variant("LoopBase", 7, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "LoopInd" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* LoopInd */Caml_chrome_debugger.variant("LoopInd", 8, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "LoopInitialize" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* LoopInitialize */Caml_chrome_debugger.variant("LoopInitialize", 11, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "LoopTermBase" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* LoopTermBase */Caml_chrome_debugger.variant("LoopTermBase", 9, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          case "LoopTermDec" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* LoopTermDec */Caml_chrome_debugger.variant("LoopTermDec", 10, [x]);
                                        }), Decoder$GclAtom.range, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var Origin = {
  decode: decode
};

function Body$ProofObligation(Props) {
  var payload = Props.payload;
  return React.createElement("li", {
              className: "gcl-body-item"
            }, React.createElement("span", {
                  className: "gcl-proof-obligation-antecedent"
                }, Syntax$GclAtom.Expr.toString(payload[1])), React.createElement("span", {
                  className: "gcl-proof-obligation-arrow"
                }, "â‡’"), React.createElement("span", {
                  className: "gcl-proof-obligation-consequent"
                }, Syntax$GclAtom.Expr.toString(payload[2])));
}

var partial_arg = Syntax$GclAtom.Expr.decode;

var partial_arg$1 = Syntax$GclAtom.Expr.decode;

function partial_arg$2(param) {
  return Json_decode.tuple4(Json_decode.$$int, partial_arg$1, partial_arg, (function (param) {
                return Json_decode.array(decode, param);
              }), param);
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return /* ProofObligation */Caml_chrome_debugger.simpleVariant("ProofObligation", [
                          param[0],
                          param[1],
                          param[2],
                          param[3]
                        ]);
              }), partial_arg$2, param);
}

var ProofObligation = {
  make: Body$ProofObligation,
  decode: decode$1
};

function Body(Props) {
  var body = Props.body;
  if (typeof body === "number") {
    return React.createElement(React.Fragment, undefined);
  } else if (body.tag) {
    var paragraphs = Util$GclAtom.React.manyIn("div", {
            className: "gcl-plain-text gcl-body-item"
          })(Rebase.$$Array.map((function (s) {
                return React.createElement("p", undefined, s);
              }), Rebase.$$Array.filter((function (x) {
                    return !Rebase.$$String.isEmpty(x);
                  }), body[0].split("\n"))));
    return React.createElement("div", {
                className: "gcl-body"
              }, paragraphs);
  } else {
    var ps = body[0];
    if (ps.length !== 0) {
      var list = Util$GclAtom.React.manyIn("ul", {
              className: "gcl-proof-obligation-list"
            })(Rebase.$$Array.map((function (payload) {
                  return React.createElement(Body$ProofObligation, {
                              payload: payload
                            });
                }), ps));
      return React.createElement("div", {
                  className: "gcl-body"
                }, list);
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  }
}

var make = Body;

exports.Origin = Origin;
exports.ProofObligation = ProofObligation;
exports.make = make;
/* decode Not a pure module */
