// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var React = require("react");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Base$GclAtom = require("../GCL/Base.bs.js");
var Link$GclAtom = require("./Link.bs.js");
var Pred$GclAtom = require("./Pred.bs.js");
var Util$GclAtom = require("../Util.bs.js");
var Syntax$GclAtom = require("../GCL/Syntax.bs.js");
var Decoder$GclAtom = require("../GCL/Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "AtAbort" :
              var partial_arg = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAbort */Caml_chrome_debugger.variant("AtAbort", 0, [x]);
                                        }), partial_arg, param);
                          })]);
          case "AtAssertion" :
              var partial_arg$1 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssertion */Caml_chrome_debugger.variant("AtAssertion", 4, [x]);
                                        }), partial_arg$1, param);
                          })]);
          case "AtAssignment" :
              var partial_arg$2 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssignment */Caml_chrome_debugger.variant("AtAssignment", 3, [x]);
                                        }), partial_arg$2, param);
                          })]);
          case "AtBoundDecrement" :
              var partial_arg$3 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtBoundDecrement */Caml_chrome_debugger.variant("AtBoundDecrement", 9, [x]);
                                        }), partial_arg$3, param);
                          })]);
          case "AtIf" :
              var partial_arg$4 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtIf */Caml_chrome_debugger.variant("AtIf", 6, [x]);
                                        }), partial_arg$4, param);
                          })]);
          case "AtLoop" :
              var partial_arg$5 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoop */Caml_chrome_debugger.variant("AtLoop", 7, [x]);
                                        }), partial_arg$5, param);
                          })]);
          case "AtLoopInvariant" :
              var partial_arg$6 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoopInvariant */Caml_chrome_debugger.variant("AtLoopInvariant", 5, [x]);
                                        }), partial_arg$6, param);
                          })]);
          case "AtSkip" :
              var partial_arg$7 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSkip */Caml_chrome_debugger.variant("AtSkip", 1, [x]);
                                        }), partial_arg$7, param);
                          })]);
          case "AtSpec" :
              var partial_arg$8 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSpec */Caml_chrome_debugger.variant("AtSpec", 2, [x]);
                                        }), partial_arg$8, param);
                          })]);
          case "AtTermination" :
              var partial_arg$9 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtTermination */Caml_chrome_debugger.variant("AtTermination", 8, [x]);
                                        }), partial_arg$9, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toString(param) {
  switch (param.tag | 0) {
    case /* AtAbort */0 :
        return "Abort";
    case /* AtSkip */1 :
        return "Skip";
    case /* AtSpec */2 :
        return "Spec";
    case /* AtAssignment */3 :
        return "Assignment";
    case /* AtAssertion */4 :
        return "Assertion";
    case /* AtLoopInvariant */5 :
        return "Loop Invariant";
    case /* AtIf */6 :
        return "Conditional";
    case /* AtLoop */7 :
        return "Loop";
    case /* AtTermination */8 :
        return "Termination";
    case /* AtBoundDecrement */9 :
        return "Bound Decrement";
    
  }
}

function locOf(param) {
  return param[0];
}

var Origin = {
  decode: decode,
  toString: toString,
  locOf: locOf
};

function Body$ProofObligation(Props) {
  var payload = Props.payload;
  var o = payload[3];
  var origin = React.createElement(Link$GclAtom.make, {
        loc: o[0],
        children: toString(o)
      });
  return React.createElement("li", {
              className: "gcl-body-item native-key-bindings",
              tabIndex: -1
            }, React.createElement("span", {
                  className: "gcl-proof-obligation-message"
                }, origin), React.createElement("span", {
                  className: "gcl-proof-obligation-antecedent"
                }, React.createElement(Pred$GclAtom.make, {
                      value: payload[1]
                    })), React.createElement("span", {
                  className: "gcl-proof-obligation-arrow"
                }, "â‡’"), React.createElement("span", {
                  className: "gcl-proof-obligation-consequent"
                }, React.createElement(Pred$GclAtom.make, {
                      value: payload[2]
                    })));
}

var partial_arg = Syntax$GclAtom.Pred.decode;

var partial_arg$1 = Syntax$GclAtom.Pred.decode;

function partial_arg$2(param) {
  return Json_decode.tuple4(Json_decode.$$int, partial_arg$1, partial_arg, decode, param);
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return /* ProofObligation */Caml_chrome_debugger.simpleVariant("ProofObligation", [
                          param[0],
                          param[1],
                          param[2],
                          param[3]
                        ]);
              }), partial_arg$2, param);
}

var ProofObligation = {
  make: Body$ProofObligation,
  decode: decode$1
};

function Body(Props) {
  var body = Props.body;
  if (typeof body === "number") {
    return React.createElement(React.Fragment, undefined);
  } else if (body.tag) {
    var paragraphs = Util$GclAtom.React.manyIn("div", {
            className: "gcl-plain-text gcl-body-item"
          })(Rebase.$$Array.map((function (s) {
                return React.createElement("p", undefined, s);
              }), Rebase.$$Array.filter((function (x) {
                    return !Rebase.$$String.isEmpty(x);
                  }), body[0].split("\n"))));
    return React.createElement("div", {
                className: "gcl-body"
              }, paragraphs);
  } else {
    var ps = body[0];
    if (ps.length !== 0) {
      var list = Util$GclAtom.React.manyIn("ul", {
              className: "gcl-proof-obligation-list"
            })(Rebase.$$Array.map((function (payload) {
                  return React.createElement(Body$ProofObligation, {
                              payload: payload
                            });
                }), ps));
      return React.createElement("div", {
                  className: "gcl-body"
                }, list);
    } else {
      return React.createElement(React.Fragment, undefined);
    }
  }
}

var make = Body;

exports.Origin = Origin;
exports.ProofObligation = ProofObligation;
exports.make = make;
/* decode Not a pure module */
