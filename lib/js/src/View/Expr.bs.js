// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Decoder$GclAtom = require("../GCL/Decoder.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function decode(json) {
  return Decoder$GclAtom.sum((function (tag) {
                  switch (tag) {
                    case "Bol" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Bool */Caml_chrome_debugger.variant("Bool", 1, [x]);
                                                  }), Json_decode.bool, param);
                                    })]);
                    case "Num" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Num */Caml_chrome_debugger.variant("Num", 0, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function toString(param) {
  if (param.tag) {
    return Pervasives.string_of_bool(param[0]);
  } else {
    return String(param[0]);
  }
}

var Lit = {
  decode: decode,
  toString: toString
};

function toString$1(param) {
  switch (param) {
    case /* EQ */0 :
        return "=";
    case /* NEQ */1 :
        return "≠";
    case /* LTE */2 :
        return "≤";
    case /* GTE */3 :
        return "≥";
    case /* LT */4 :
        return "<";
    case /* GT */5 :
        return ">";
    case /* Implies */6 :
        return "→";
    case /* Conj */7 :
        return "∧";
    case /* Disj */8 :
        return "∨";
    case /* Neg */9 :
        return "¬";
    case /* Add */10 :
        return "+";
    case /* Sub */11 :
        return "-";
    case /* Mul */12 :
        return "*";
    case /* Div */13 :
        return "/";
    case /* Mod */14 :
        return "%";
    
  }
}

function decode$1(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "Add" :
                      return /* Add */10;
                  case "Conj" :
                      return /* Conj */7;
                  case "Disj" :
                      return /* Disj */8;
                  case "Div" :
                      return /* Div */13;
                  case "EQ" :
                      return /* EQ */0;
                  case "GT" :
                      return /* GT */5;
                  case "GTE" :
                      return /* GTE */3;
                  case "Implies" :
                      return /* Implies */6;
                  case "LT" :
                      return /* LT */4;
                  case "LTE" :
                      return /* LTE */2;
                  case "Mod" :
                      return /* Mod */14;
                  case "Mul" :
                      return /* Mul */12;
                  case "NEQ" :
                      return /* NEQ */1;
                  case "Neg" :
                      return /* Neg */9;
                  case "Sub" :
                      return /* Sub */11;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

var Op = {
  toString: toString$1,
  decode: decode$1
};

function decode$2(json) {
  return Decoder$GclAtom.sum((function (tag) {
                  switch (tag) {
                    case "App" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* App */Caml_chrome_debugger.variant("App", 4, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$2, decode$2, param);
                                                  }), param);
                                    })]);
                    case "Const" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Const */Caml_chrome_debugger.variant("Const", 1, [x]);
                                                  }), Json_decode.string, param);
                                    })]);
                    case "Hole" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Hole */Caml_chrome_debugger.variant("Hole", 5, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(Json_decode.$$int, (function (param) {
                                                                  return Json_decode.array(decodeSubst, param);
                                                                }), param);
                                                  }), param);
                                    })]);
                    case "Lit" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [x]);
                                                  }), decode, param);
                                    })]);
                    case "Op" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Op */Caml_chrome_debugger.variant("Op", 3, [x]);
                                                  }), decode$1, param);
                                    })]);
                    case "Var" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 0, [x]);
                                                  }), Json_decode.string, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function decodeSubst(json) {
  return Json_decode.dict(decode$2, json);
}

function $$return(x) {
  return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
}

function flatMap(x, f) {
  if (x.tag) {
    return Curry._1(f, x[0]);
  } else {
    var g = x[0];
    return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
                  return flatMap(Curry._1(g, x), f);
                })]);
  }
}

var $$var = /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
      })]);

var VarArg = {
  $$return: $$return,
  flatMap: flatMap,
  let_: flatMap,
  $$var: $$var
};

function classify(param) {
  switch (param) {
    case /* EQ */0 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [5]);
    case /* NEQ */1 :
    case /* LTE */2 :
    case /* GTE */3 :
    case /* LT */4 :
    case /* GT */5 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [6]);
    case /* Implies */6 :
        return /* InfixR */Caml_chrome_debugger.variant("InfixR", 1, [1]);
    case /* Conj */7 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [3]);
    case /* Disj */8 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [2]);
    case /* Neg */9 :
        return /* Prefix */Caml_chrome_debugger.variant("Prefix", 3, [4]);
    case /* Add */10 :
    case /* Sub */11 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [7]);
    case /* Mul */12 :
    case /* Div */13 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [8]);
    case /* Mod */14 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [9]);
    
  }
}

function parensIf(p, s) {
  if (p) {
    return "(" + (s + ")");
  } else {
    return s;
  }
}

function handleOperator(n, op) {
  var match = classify(op);
  switch (match.tag | 0) {
    case /* InfixL */0 :
        var m = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m, toString$2(m, p) + (" " + (toString$1(op) + (" " + toString$2(m + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* InfixR */1 :
        var m$1 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$1, toString$2(m$1 + 1 | 0, p) + (" " + (toString$1(op) + (" " + toString$2(m$1, q)))))]);
                                  }));
                    }));
    case /* Infix */2 :
        var m$2 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$2, toString$2(m$2 + 1 | 0, p) + (" " + (toString$1(op) + (" " + toString$2(m$2 + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* Prefix */3 :
        var m$3 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$3, toString$1(op) + (" " + toString$2(m$3, p)))]);
                    }));
    case /* Postfix */4 :
        var m$4 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$4, toString$2(m$4, p) + (" " + toString$1(op)))]);
                    }));
    
  }
}

function handleExpr(n, param) {
  switch (param.tag | 0) {
    case /* Var */0 :
    case /* Const */1 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [param[0]]);
    case /* Lit */2 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [toString(param[0])]);
    case /* Op */3 :
        return handleOperator(n, param[0]);
    case /* App */4 :
        var q = param[1];
        var match = handleExpr(n, param[0]);
        if (match.tag) {
          var s = match[0];
          var match$1 = handleExpr(n, q);
          if (match$1.tag) {
            var t = match$1[0];
            if (q.tag === /* App */4) {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + parensIf(true, t))]);
            } else {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + t)]);
            }
          } else {
            return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [match$1[0]]);
          }
        } else {
          return Curry._1(match[0], q);
        }
    case /* Hole */5 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, ["[" + (String(param[0]) + "]")]);
    
  }
}

function toString$2(n, p) {
  var match = handleExpr(n, p);
  if (match.tag) {
    return match[0];
  } else {
    return "";
  }
}

var Precedence = {
  VarArg: VarArg,
  classify: classify,
  parensIf: parensIf,
  handleOperator: handleOperator,
  handleExpr: handleExpr,
  toString: toString$2
};

function toString$3(param) {
  return toString$2(0, param);
}

exports.Lit = Lit;
exports.Op = Op;
exports.decode = decode$2;
exports.decodeSubst = decodeSubst;
exports.Precedence = Precedence;
exports.toString = toString$3;
/* Decoder-GclAtom Not a pure module */
