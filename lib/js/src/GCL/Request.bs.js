// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function request(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Debug"
                  ],
                  /* [] */0
                ]));
  } else {
    switch (param.tag | 0) {
      case /* Load */0 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Load"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* Refine */1 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Refine"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              Json_encode.pair((function (prim) {
                                      return prim;
                                    }), (function (prim) {
                                      return prim;
                                    }), /* tuple */[
                                    param[0],
                                    param[1]
                                  ])
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* InsertAssertion */2 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "InsertAssertion"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      
    }
  }
}

var Encode = {
  request: request
};

var encode = Curry._2(Rebase.Fn.$great$great, request, Json.stringify);

exports.Encode = Encode;
exports.encode = encode;
/* encode Not a pure module */
