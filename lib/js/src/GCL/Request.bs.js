// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function request(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Debug"
                  ],
                  /* [] */0
                ]));
  } else if (param.tag) {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Refine"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        Json_encode.pair((function (prim) {
                                return prim;
                              }), (function (prim) {
                                return prim;
                              }), /* tuple */[
                              param[0],
                              param[1]
                            ])
                      ],
                      /* [] */0
                    ])
                ]));
  } else {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Load"
                  ],
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* tuple */[
                        "contents",
                        param[0]
                      ],
                      /* [] */0
                    ])
                ]));
  }
}

var Encode = {
  request: request
};

function encode(x) {
  return Json.stringify(request(x));
}

exports.Encode = Encode;
exports.encode = encode;
/* No side effect */
