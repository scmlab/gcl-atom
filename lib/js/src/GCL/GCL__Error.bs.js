// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Base$GclAtom = require("./Base.bs.js");
var Util$GclAtom = require("../Util.bs.js");
var Syntax$GclAtom = require("./Syntax.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "Global" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Global */Caml_chrome_debugger.variant("Global", 0, [Curry._1(Base$GclAtom.Loc.decode, json)]);
                          })]);
          case "Local" :
              var partial_arg = Base$GclAtom.Loc.decode;
              var partial_arg$1 = function (param) {
                return Json_decode.pair(partial_arg, Json_decode.$$int, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Local */Caml_chrome_debugger.variant("Local", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), partial_arg$1, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toString(site) {
  if (site.tag) {
    return "at " + (Base$GclAtom.Loc.toString(site[0]) + (" in #" + String(site[1])));
  } else {
    return "at " + Base$GclAtom.Loc.toString(site[0]);
  }
}

var Site = {
  decode: decode,
  toString: toString
};

var decode$1 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "NotFunction" :
              var partial_arg = Base$GclAtom.Loc.decode;
              var partial_arg$1 = Syntax$GclAtom.Type.decode;
              var partial_arg$2 = function (param) {
                return Json_decode.pair(partial_arg$1, partial_arg, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotFunction */Caml_chrome_debugger.variant("NotFunction", 3, [param[0]]);
                                        }), partial_arg$2, param);
                          })]);
          case "NotInScope" :
              var partial_arg$3 = Base$GclAtom.Loc.decode;
              var partial_arg$4 = function (param) {
                return Json_decode.pair(Json_decode.string, partial_arg$3, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotInScope */Caml_chrome_debugger.variant("NotInScope", 0, [param[0]]);
                                        }), partial_arg$4, param);
                          })]);
          case "RecursiveType" :
              var partial_arg$5 = Base$GclAtom.Loc.decode;
              var partial_arg$6 = Syntax$GclAtom.Type.decode;
              var partial_arg$7 = function (param) {
                return Json_decode.tuple3(Json_decode.$$int, partial_arg$6, partial_arg$5, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* RecursiveType */Caml_chrome_debugger.variant("RecursiveType", 2, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), partial_arg$7, param);
                          })]);
          case "UnifyFailed" :
              var partial_arg$8 = Base$GclAtom.Loc.decode;
              var partial_arg$9 = Syntax$GclAtom.Type.decode;
              var partial_arg$10 = Syntax$GclAtom.Type.decode;
              var partial_arg$11 = function (param) {
                return Json_decode.tuple3(partial_arg$10, partial_arg$9, partial_arg$8, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* UnifyFailed */Caml_chrome_debugger.variant("UnifyFailed", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), partial_arg$11, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$TypeError = {
  decode: decode$1
};

var decode$2 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* DigHole */6;
                          })]);
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* ExcessBound */3;
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingAssertion */1;
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingBound */0;
                          })]);
          case "MissingLoopInvariant" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingLoopInvariant */2;
                          })]);
          case "MissingPostcondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPostcondition */5;
                          })]);
          case "MissingPrecondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPrecondition */4;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var StructError = {
  decode: decode$2
};

var decodeKind = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "CannotReadFile" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* CannotReadFile */Caml_chrome_debugger.variant("CannotReadFile", 3, [Json_decode.string(json)]);
                          })]);
          case "LexicalError" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LexicalError */0;
                          })]);
          case "NotLoaded" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* NotLoaded */1;
                          })]);
          case "StructError2" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* StructError */Caml_chrome_debugger.variant("StructError", 1, [Curry._1(decode$2, json)]);
                          })]);
          case "SyntacticError" :
              var partial_arg = Base$GclAtom.Loc.decode;
              var partial_arg$1 = function (param) {
                return Json_decode.pair(partial_arg, Json_decode.string, param);
              };
              var partial_arg$2 = function (param) {
                return Json_decode.array(partial_arg$1, param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (pairs) {
                                          return /* SyntacticError */Caml_chrome_debugger.variant("SyntacticError", 0, [Rebase.$$Array.map((function (prim) {
                                                            return prim[1];
                                                          }), pairs)]);
                                        }), partial_arg$2, param);
                          })]);
          case "TypeError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* TypeError */Caml_chrome_debugger.variant("TypeError", 2, [Curry._1(decode$1, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function decode$3(param) {
  return Json_decode.map((function (param) {
                return /* Error */Caml_chrome_debugger.simpleVariant("Error", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(decode, decodeKind, param);
              }), param);
}

exports.Site = Site;
exports.$$TypeError = $$TypeError;
exports.StructError = StructError;
exports.decodeKind = decodeKind;
exports.decode = decode$3;
/* decode Not a pure module */
