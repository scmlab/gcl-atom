// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Base$GclAtom = require("./Base.bs.js");
var Util$GclAtom = require("../Util/Util.bs.js");
var Syntax$GclAtom = require("./Syntax.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "AtAbort" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAbort */Caml_chrome_debugger.variant("AtAbort", 0, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssertion */Caml_chrome_debugger.variant("AtAssertion", 4, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtAssignment" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssignment */Caml_chrome_debugger.variant("AtAssignment", 3, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtBoundDecrement" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtBoundDecrement */Caml_chrome_debugger.variant("AtBoundDecrement", 9, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtIf" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtIf */Caml_chrome_debugger.variant("AtIf", 6, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtLoop" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoop */Caml_chrome_debugger.variant("AtLoop", 7, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtLoopInvariant" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoopInvariant */Caml_chrome_debugger.variant("AtLoopInvariant", 5, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtSkip" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSkip */Caml_chrome_debugger.variant("AtSkip", 1, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtSpec" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSpec */Caml_chrome_debugger.variant("AtSpec", 2, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          case "AtTermination" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtTermination */Caml_chrome_debugger.variant("AtTermination", 8, [x]);
                                        }), Base$GclAtom.Loc.decode, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toString(param) {
  switch (param.tag | 0) {
    case /* AtAbort */0 :
        return "Abort";
    case /* AtSkip */1 :
        return "Skip";
    case /* AtSpec */2 :
        return "Spec";
    case /* AtAssignment */3 :
        return "Assignment";
    case /* AtAssertion */4 :
        return "Assertion";
    case /* AtLoopInvariant */5 :
        return "Loop Invariant";
    case /* AtIf */6 :
        return "Conditional";
    case /* AtLoop */7 :
        return "Loop";
    case /* AtTermination */8 :
        return "Termination";
    case /* AtBoundDecrement */9 :
        return "Bound Decrement";
    
  }
}

function locOf(param) {
  return param[0];
}

var Origin = {
  decode: decode,
  toString: toString,
  locOf: locOf
};

function decode$1(param) {
  return Json_decode.map((function (param) {
                return /* ProofObligation */Caml_chrome_debugger.simpleVariant("ProofObligation", [
                          param[0],
                          param[1],
                          param[2],
                          param[3]
                        ]);
              }), (function (param) {
                return Json_decode.tuple4(Json_decode.$$int, Syntax$GclAtom.Pred.decode, Syntax$GclAtom.Pred.decode, decode, param);
              }), param);
}

var ProofObligation = {
  decode: decode$1
};

function decode$2(json) {
  return {
          id: Json_decode.field("specID", Json_decode.$$int, json),
          pre: Json_decode.field("specPreCond", Syntax$GclAtom.Pred.decode, json),
          post: Json_decode.field("specPostCond", Syntax$GclAtom.Pred.decode, json),
          loc: Json_decode.field("specLoc", Base$GclAtom.Loc.decode, json)
        };
}

var Specification = {
  decode: decode$2
};

function toLoc(site, specifications) {
  if (site.tag) {
    var i = site[1];
    var loc = site[0];
    var specs = Belt_Array.keep(specifications, (function (spec) {
            return spec.id === i;
          }));
    return Belt_Option.mapWithDefault(Belt_Array.get(specs, 0), loc, (function (spec) {
                  return Base$GclAtom.Loc.translateBy(1, 0, 1, 0, Base$GclAtom.Loc.translate(loc, spec.loc));
                }));
  } else {
    return site[0];
  }
}

function toRange(site, specifications) {
  return Base$GclAtom.Loc.toRange(toLoc(site, specifications));
}

function toString$1(site) {
  if (site.tag) {
    return "at " + (Base$GclAtom.Loc.toString(site[0]) + (" in #" + String(site[1])));
  } else {
    return "at " + Base$GclAtom.Loc.toString(site[0]);
  }
}

var decode$3 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "Global" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Global */Caml_chrome_debugger.variant("Global", 0, [Curry._1(Base$GclAtom.Loc.decode, json)]);
                          })]);
          case "Local" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* Local */Caml_chrome_debugger.variant("Local", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Base$GclAtom.Loc.decode, Json_decode.$$int, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var Site = {
  toLoc: toLoc,
  toRange: toRange,
  toString: toString$1,
  decode: decode$3
};

var decode$4 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "NotFunction" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotFunction */Caml_chrome_debugger.variant("NotFunction", 3, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Syntax$GclAtom.Type.decode, Base$GclAtom.Loc.decode, param);
                                        }), param);
                          })]);
          case "NotInScope" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotInScope */Caml_chrome_debugger.variant("NotInScope", 0, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.string, Base$GclAtom.Loc.decode, param);
                                        }), param);
                          })]);
          case "RecursiveType" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* RecursiveType */Caml_chrome_debugger.variant("RecursiveType", 2, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.$$int, Syntax$GclAtom.Type.decode, Base$GclAtom.Loc.decode, param);
                                        }), param);
                          })]);
          case "UnifyFailed" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* UnifyFailed */Caml_chrome_debugger.variant("UnifyFailed", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Syntax$GclAtom.Type.decode, Syntax$GclAtom.Type.decode, Base$GclAtom.Loc.decode, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$TypeError = {
  decode: decode$4
};

var decode$5 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* DigHole */4;
                          })]);
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* ExcessBound */2;
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingAssertion */1;
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingBound */0;
                          })]);
          case "MissingPostcondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPostcondition */3;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var StructError = {
  decode: decode$5
};

var decode$6 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* DigHole */5;
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingBound */1;
                          })]);
          case "MissingLoopInvariant" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingLoopInvariant */0;
                          })]);
          case "MissingPostcondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPostcondition */3;
                          })]);
          case "MissingPrecondition" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingPrecondition */2;
                          })]);
          case "PreconditionUnknown" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* PreconditionUnknown */4;
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var StructError2 = {
  decode: decode$6
};

var decodeKind = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "CannotReadFile" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* CannotReadFile */Caml_chrome_debugger.variant("CannotReadFile", 4, [Json_decode.string(json)]);
                          })]);
          case "LexicalError" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LexicalError */0;
                          })]);
          case "NotLoaded" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* NotLoaded */1;
                          })]);
          case "StructError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* StructError */Caml_chrome_debugger.variant("StructError", 1, [Curry._1(decode$5, json)]);
                          })]);
          case "StructError2" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* StructError2 */Caml_chrome_debugger.variant("StructError2", 2, [Curry._1(decode$6, json)]);
                          })]);
          case "SyntacticError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (pairs) {
                                          return /* SyntacticError */Caml_chrome_debugger.variant("SyntacticError", 0, [Belt_Array.map(pairs, (function (prim) {
                                                            return prim[1];
                                                          }))]);
                                        }), (function (param) {
                                          return Json_decode.array((function (param) {
                                                        return Json_decode.pair(Base$GclAtom.Loc.decode, Json_decode.string, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "TypeError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* TypeError */Caml_chrome_debugger.variant("TypeError", 3, [Curry._1(decode$4, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function decode$7(param) {
  return Json_decode.map((function (param) {
                return /* Error */Caml_chrome_debugger.simpleVariant("Error", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(decode$3, decodeKind, param);
              }), param);
}

var $$Error = {
  Site: Site,
  $$TypeError: $$TypeError,
  StructError: StructError,
  StructError2: StructError2,
  decodeKind: decodeKind,
  decode: decode$7
};

var decode$8 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (errors) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 0, [errors]);
                                        }), (function (param) {
                                          return Json_decode.array(decode$7, param);
                                        }), param);
                          })]);
          case "Insert" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 3, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.$$int, Syntax$GclAtom.Expr.decode, param);
                                        }), param);
                          })]);
          case "OK" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* OK */Caml_chrome_debugger.variant("OK", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.array(decode$1, param);
                                                      }), (function (param) {
                                                        return Json_decode.array(decode$2, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "Resolve" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (i) {
                                          return /* Resolve */Caml_chrome_debugger.variant("Resolve", 2, [i]);
                                        }), Json_decode.$$int, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

exports.Origin = Origin;
exports.ProofObligation = ProofObligation;
exports.Specification = Specification;
exports.$$Error = $$Error;
exports.decode = decode$8;
/* decode Not a pure module */
