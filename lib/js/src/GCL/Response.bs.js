// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var P$GclAtom = require("../Util/P.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Body$GclAtom = require("../View/Body.bs.js");
var Spec$GclAtom = require("./Spec.bs.js");
var Type$GclAtom = require("../View/Type.bs.js");
var Decoder$GclAtom = require("./Decoder.bs.js");
var ErrorSite$GclAtom = require("../Editor/ErrorSite.bs.js");
var Decoration$GclAtom = require("../Editor/Decoration.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Specification$GclAtom = require("./Specification.bs.js");

var decode = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "NotFunction" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotFunction */Caml_chrome_debugger.variant("NotFunction", 3, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Type$GclAtom.decode, Decoder$GclAtom.range, param);
                                        }), param);
                          })]);
          case "NotInScope" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* NotInScope */Caml_chrome_debugger.variant("NotInScope", 0, [param[0]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Json_decode.string, Decoder$GclAtom.range, param);
                                        }), param);
                          })]);
          case "RecursiveType" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* RecursiveType */Caml_chrome_debugger.variant("RecursiveType", 2, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Json_decode.$$int, Type$GclAtom.decode, Decoder$GclAtom.range, param);
                                        }), param);
                          })]);
          case "UnifyFailed" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* UnifyFailed */Caml_chrome_debugger.variant("UnifyFailed", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.tuple3(Type$GclAtom.decode, Type$GclAtom.decode, Decoder$GclAtom.range, param);
                                        }), param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var $$TypeError = {
  decode: decode
};

var decode$1 = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "DigHole" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* DigHole */4;
                          })]);
          case "ExcessBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* ExcessBound */2;
                          })]);
          case "MissingAssertion" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingAssertion */1;
                          })]);
          case "MissingBound" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return /* MissingBound */0;
                          })]);
          case "MissingPostcondition" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* MissingPostcondition */3;
                          })]);
          case "Panic" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* Panic */Caml_chrome_debugger.simpleVariant("Panic", [Json_decode.string(json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

var ConvertError = {
  decode: decode$1
};

var decodeKind = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "ConvertError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* ConvertError */Caml_chrome_debugger.variant("ConvertError", 1, [Curry._1(decode$1, json)]);
                          })]);
          case "LexicalError" :
              return /* TagOnly */Caml_chrome_debugger.variant("TagOnly", 1, [(function (param) {
                            return /* LexicalError */0;
                          })]);
          case "SyntacticError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* SyntacticError */Caml_chrome_debugger.variant("SyntacticError", 0, [param[1]]);
                                        }), (function (param) {
                                          return Json_decode.pair(Decoder$GclAtom.range, Json_decode.string, param);
                                        }), param);
                          })]);
          case "TypeError" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (json) {
                            return /* TypeError */Caml_chrome_debugger.variant("TypeError", 2, [Curry._1(decode, json)]);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function decode$2(param) {
  return Json_decode.map((function (param) {
                return /* Error */Caml_chrome_debugger.simpleVariant("Error", [
                          param[0],
                          param[1]
                        ]);
              }), (function (param) {
                return Json_decode.pair(ErrorSite$GclAtom.decode, decodeKind, param);
              }), param);
}

function handle(error) {
  var kind = error[1];
  var site = error[0];
  if (typeof kind === "number") {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                      return Decoration$GclAtom.markSite(site, param, param$1);
                    })]),
              /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 6, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Lexical Error"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [ErrorSite$GclAtom.toString(site)])
                    ]),
                  /* [] */0
                ])
            ]);
  } else {
    switch (kind.tag | 0) {
      case /* SyntacticError */0 :
          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                            return Decoration$GclAtom.markSite(site, param, param$1);
                          })]),
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* Display */Caml_chrome_debugger.variant("Display", 6, [
                            /* Error */Caml_chrome_debugger.variant("Error", 1, ["Parse Error"]),
                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, [kind[0]])
                          ]),
                        /* [] */0
                      ])
                  ]);
      case /* ConvertError */1 :
          var match = kind[0];
          if (typeof match === "number") {
            switch (match) {
              case /* MissingBound */0 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                    return Decoration$GclAtom.markSite(site, param, param$1);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Bound Missing"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Bound missing at the end of the assertion before the DO construct \" , bnd : ... }\""])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* MissingAssertion */1 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                    return Decoration$GclAtom.markSite(site, param, param$1);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Assertion Missing"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Assertion before the DO construct is missing"])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* ExcessBound */2 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                    return Decoration$GclAtom.markSite(site, param, param$1);
                                  })]),
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                    /* Error */Caml_chrome_debugger.variant("Error", 1, ["Excess Bound"]),
                                    /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Unnecessary bound annotation at this assertion"])
                                  ]),
                                /* [] */0
                              ])
                          ]);
              case /* MissingPostcondition */3 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                /* Error */Caml_chrome_debugger.variant("Error", 1, ["Postcondition Missing"]),
                                /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The last statement of the program should be an assertion"])
                              ]),
                            /* [] */0
                          ]);
              case /* DigHole */4 :
                  return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                                    console.log("Dig!!!!!!!!");
                                    return P$GclAtom.let_(Spec$GclAtom.digHole(site, instance), (function (param) {
                                                  var match = instance[/* history */6];
                                                  if (match !== undefined && !(typeof match === "number" || !match.tag)) {
                                                    console.log("\n\n!!!!!!!!\n\n");
                                                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 4, [/* Save */1]),
                                                                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                      /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 4, [/* Refine */2]),
                                                                      /* [] */0
                                                                    ])
                                                                ]));
                                                  } else {
                                                    return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                                  /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 4, [/* Save */1]),
                                                                  /* [] */0
                                                                ]));
                                                  }
                                                }));
                                  })]),
                            /* [] */0
                          ]);
              
            }
          } else {
            return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* Display */Caml_chrome_debugger.variant("Display", 6, [
                          /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic"]),
                          /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["This should not have happened, please report this issue\n" + match[0]])
                        ]),
                      /* [] */0
                    ]);
          }
      case /* TypeError */2 :
          var match$1 = kind[0];
          switch (match$1.tag | 0) {
            case /* NotInScope */0 :
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                  return Decoration$GclAtom.markSite(site, param, param$1);
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The definition " + (match$1[0] + " is not in scope")])
                                ]),
                              /* [] */0
                            ])
                        ]);
            case /* UnifyFailed */1 :
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                  return Decoration$GclAtom.markSite(site, param, param$1);
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Cannot unify: " + (Type$GclAtom.toString(match$1[0]) + ("\nwith        : " + Type$GclAtom.toString(match$1[1])))])
                                ]),
                              /* [] */0
                            ])
                        ]);
            case /* RecursiveType */2 :
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                  return Decoration$GclAtom.markSite(site, param, param$1);
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Recursive type variable: " + (Type$GclAtom.toString(/* Var */Caml_chrome_debugger.variant("Var", 3, [match$1[0]])) + ("\nin type             : " + Type$GclAtom.toString(match$1[1])))])
                                ]),
                              /* [] */0
                            ])
                        ]);
            case /* NotFunction */3 :
                return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (param, param$1) {
                                  return Decoration$GclAtom.markSite(site, param, param$1);
                                })]),
                          /* :: */Caml_chrome_debugger.simpleVariant("::", [
                              /* Display */Caml_chrome_debugger.variant("Display", 6, [
                                  /* Error */Caml_chrome_debugger.variant("Error", 1, ["Type Error"]),
                                  /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["The type " + (Type$GclAtom.toString(match$1[0]) + " is not a function type")])
                                ]),
                              /* [] */0
                            ])
                        ]);
            
          }
      
    }
  }
}

var $$Error = {
  $$TypeError: $$TypeError,
  ConvertError: ConvertError,
  decodeKind: decodeKind,
  decode: decode$2,
  handle: handle
};

var decode$3 = Decoder$GclAtom.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (errors) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 0, [errors]);
                                        }), (function (param) {
                                          return Json_decode.array(decode$2, param);
                                        }), param);
                          })]);
          case "OK" :
              var partial_arg = Body$GclAtom.ProofObligation.decode;
              var partial_arg$1 = function (param) {
                return Json_decode.array(partial_arg, param);
              };
              var partial_arg$2 = function (param) {
                return Json_decode.pair(partial_arg$1, (function (param) {
                              return Json_decode.array(Specification$GclAtom.decode, param);
                            }), param);
              };
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* OK */Caml_chrome_debugger.variant("OK", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), partial_arg$2, param);
                          })]);
          case "Resolve" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (i) {
                                          return /* Resolve */Caml_chrome_debugger.variant("Resolve", 2, [i]);
                                        }), Json_decode.$$int, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function handle$1(response) {
  switch (response.tag | 0) {
    case /* Error */0 :
        return Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(handle, response[0])));
    case /* OK */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SetSpecifications */Caml_chrome_debugger.variant("SetSpecifications", 1, [response[1]]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (specifications, editor) {
                              return Rebase.$$Array.fromList(Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(Rebase.List.fromArray, Rebase.$$Array.map(Curry._2(Rebase.Fn.flip, Decoration$GclAtom.markSpec, editor), specifications)))));
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 6, [
                              /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Proof Obligations"]),
                              /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [response[0]])
                            ]),
                          /* [] */0
                        ])
                    ])
                ]);
    case /* Resolve */2 :
        var i = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          return P$GclAtom.let_(Spec$GclAtom.resolve(i, instance), (function (param) {
                                        return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* DispatchLocal */Caml_chrome_debugger.variant("DispatchLocal", 4, [/* Save */1]),
                                                      /* [] */0
                                                    ]));
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* UnknownResponse */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 6, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic: unknown response from GCL"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [JSON.stringify(response[0])])
                    ]),
                  /* [] */0
                ]);
    
  }
}

exports.$$Error = $$Error;
exports.decode = decode$3;
exports.handle = handle$1;
/* decode Not a pure module */
