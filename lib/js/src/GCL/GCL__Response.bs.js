// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Base$GclAtom = require("./Base.bs.js");
var Util$GclAtom = require("../Util.bs.js");
var Syntax$GclAtom = require("./Syntax.bs.js");
var GCL__Error$GclAtom = require("./GCL__Error.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var decode = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "AtAbort" :
              var partial_arg = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAbort */Caml_chrome_debugger.variant("AtAbort", 0, [x]);
                                        }), partial_arg, param);
                          })]);
          case "AtAssertion" :
              var partial_arg$1 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssertion */Caml_chrome_debugger.variant("AtAssertion", 4, [x]);
                                        }), partial_arg$1, param);
                          })]);
          case "AtAssignment" :
              var partial_arg$2 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtAssignment */Caml_chrome_debugger.variant("AtAssignment", 3, [x]);
                                        }), partial_arg$2, param);
                          })]);
          case "AtBoundDecrement" :
              var partial_arg$3 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtBoundDecrement */Caml_chrome_debugger.variant("AtBoundDecrement", 9, [x]);
                                        }), partial_arg$3, param);
                          })]);
          case "AtIf" :
              var partial_arg$4 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtIf */Caml_chrome_debugger.variant("AtIf", 6, [x]);
                                        }), partial_arg$4, param);
                          })]);
          case "AtLoop" :
              var partial_arg$5 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoop */Caml_chrome_debugger.variant("AtLoop", 7, [x]);
                                        }), partial_arg$5, param);
                          })]);
          case "AtLoopInvariant" :
              var partial_arg$6 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtLoopInvariant */Caml_chrome_debugger.variant("AtLoopInvariant", 5, [x]);
                                        }), partial_arg$6, param);
                          })]);
          case "AtSkip" :
              var partial_arg$7 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSkip */Caml_chrome_debugger.variant("AtSkip", 1, [x]);
                                        }), partial_arg$7, param);
                          })]);
          case "AtSpec" :
              var partial_arg$8 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtSpec */Caml_chrome_debugger.variant("AtSpec", 2, [x]);
                                        }), partial_arg$8, param);
                          })]);
          case "AtTermination" :
              var partial_arg$9 = Base$GclAtom.Loc.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (x) {
                                          return /* AtTermination */Caml_chrome_debugger.variant("AtTermination", 8, [x]);
                                        }), partial_arg$9, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

function toString(param) {
  switch (param.tag | 0) {
    case /* AtAbort */0 :
        return "Abort";
    case /* AtSkip */1 :
        return "Skip";
    case /* AtSpec */2 :
        return "Spec";
    case /* AtAssignment */3 :
        return "Assignment";
    case /* AtAssertion */4 :
        return "Assertion";
    case /* AtLoopInvariant */5 :
        return "Loop Invariant";
    case /* AtIf */6 :
        return "Conditional";
    case /* AtLoop */7 :
        return "Loop";
    case /* AtTermination */8 :
        return "Termination";
    case /* AtBoundDecrement */9 :
        return "Bound Decrement";
    
  }
}

function locOf(param) {
  return param[0];
}

var Origin = {
  decode: decode,
  toString: toString,
  locOf: locOf
};

var partial_arg = Syntax$GclAtom.Pred.decode;

var partial_arg$1 = Syntax$GclAtom.Pred.decode;

function partial_arg$2(param) {
  return Json_decode.tuple4(Json_decode.$$int, partial_arg$1, partial_arg, decode, param);
}

function decode$1(param) {
  return Json_decode.map((function (param) {
                return /* ProofObligation */Caml_chrome_debugger.simpleVariant("ProofObligation", [
                          param[0],
                          param[1],
                          param[2],
                          param[3]
                        ]);
              }), partial_arg$2, param);
}

var ProofObligation = {
  decode: decode$1
};

function decode$2(json) {
  return /* record */Caml_chrome_debugger.record([
            "id",
            "pre",
            "post",
            "loc"
          ], [
            Json_decode.field("specID", Json_decode.$$int, json),
            Json_decode.field("specPreCond", Syntax$GclAtom.Pred.decode, json),
            Json_decode.field("specPostCond", Syntax$GclAtom.Pred.decode, json),
            Json_decode.field("specLoc", Base$GclAtom.Loc.decode, json)
          ]);
}

var Specification = {
  decode: decode$2
};

var decode$3 = Util$GclAtom.Decode.sum((function (tag) {
        switch (tag) {
          case "Error" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (errors) {
                                          return /* Error */Caml_chrome_debugger.variant("Error", 0, [errors]);
                                        }), (function (param) {
                                          return Json_decode.array(GCL__Error$GclAtom.decode, param);
                                        }), param);
                          })]);
          case "Insert" :
              var partial_arg = Syntax$GclAtom.Expr.decode;
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (i) {
                                          return /* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 3, [i]);
                                        }), partial_arg, param);
                          })]);
          case "OK" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (param) {
                                          return /* OK */Caml_chrome_debugger.variant("OK", 1, [
                                                    param[0],
                                                    param[1]
                                                  ]);
                                        }), (function (param) {
                                          return Json_decode.pair((function (param) {
                                                        return Json_decode.array(decode$1, param);
                                                      }), (function (param) {
                                                        return Json_decode.array(decode$2, param);
                                                      }), param);
                                        }), param);
                          })]);
          case "Resolve" :
              return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                            return Json_decode.map((function (i) {
                                          return /* Resolve */Caml_chrome_debugger.variant("Resolve", 2, [i]);
                                        }), Json_decode.$$int, param);
                          })]);
          default:
            throw [
                  Json_decode.DecodeError,
                  "Unknown constructor: " + tag
                ];
        }
      }));

exports.Origin = Origin;
exports.ProofObligation = ProofObligation;
exports.Specification = Specification;
exports.decode = decode$3;
/* decode Not a pure module */
