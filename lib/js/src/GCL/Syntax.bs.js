// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Base$GclAtom = require("./Base.bs.js");
var Util$GclAtom = require("../Util/Util.bs.js");
var Caml_splice_call = require("bs-platform/lib/js/caml_splice_call.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function $$return(x) {
  return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
}

function flatMap(x, f) {
  if (x.tag) {
    return Curry._1(f, x[0]);
  } else {
    var g = x[0];
    return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
                  return flatMap(Curry._1(g, x), f);
                })]);
  }
}

var $$var = /* Expect */Caml_chrome_debugger.variant("Expect", 0, [(function (x) {
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [x]);
      })]);

var VarArg = {
  $$return: $$return,
  flatMap: flatMap,
  let_: flatMap,
  $$var: $$var
};

function toString(param) {
  if (param.tag) {
    if (param[0]) {
      return "True";
    } else {
      return "False";
    }
  } else {
    return String(param[0]);
  }
}

function decode(json) {
  return Util$GclAtom.Decode.sum((function (tag) {
                  switch (tag) {
                    case "Bol" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Bool */Caml_chrome_debugger.variant("Bool", 1, [x]);
                                                  }), Json_decode.bool, param);
                                    })]);
                    case "Num" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Num */Caml_chrome_debugger.variant("Num", 0, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

var Lit = {
  toString: toString,
  decode: decode
};

function toString$1(param) {
  switch (param) {
    case /* EQ */0 :
        return "=";
    case /* NEQ */1 :
        return "≠";
    case /* LTE */2 :
        return "≤";
    case /* GTE */3 :
        return "≥";
    case /* LT */4 :
        return "<";
    case /* GT */5 :
        return ">";
    case /* Implies */6 :
        return "→";
    case /* Conj */7 :
        return "∧";
    case /* Disj */8 :
        return "∨";
    case /* Neg */9 :
        return "¬";
    case /* Add */10 :
        return "+";
    case /* Sub */11 :
        return "-";
    case /* Mul */12 :
        return "×";
    case /* Div */13 :
        return "÷";
    case /* Mod */14 :
        return "%";
    
  }
}

function decode$1(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "Add" :
                      return /* Add */10;
                  case "Conj" :
                      return /* Conj */7;
                  case "Disj" :
                      return /* Disj */8;
                  case "Div" :
                      return /* Div */13;
                  case "EQ" :
                      return /* EQ */0;
                  case "GT" :
                      return /* GT */5;
                  case "GTE" :
                      return /* GTE */3;
                  case "Implies" :
                      return /* Implies */6;
                  case "LT" :
                      return /* LT */4;
                  case "LTE" :
                      return /* LTE */2;
                  case "Mod" :
                      return /* Mod */14;
                  case "Mul" :
                      return /* Mul */12;
                  case "NEQ" :
                      return /* NEQ */1;
                  case "Neg" :
                      return /* Neg */9;
                  case "Sub" :
                      return /* Sub */11;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

var Op = {
  toString: toString$1,
  decode: decode$1
};

function toString$2(param) {
  return param[0];
}

var partial_arg = Base$GclAtom.Loc.decode;

function partial_arg$1(param) {
  return Json_decode.pair(Json_decode.string, partial_arg, param);
}

function decode$2(param) {
  return Json_decode.map((function (param) {
                return /* Upper */Caml_chrome_debugger.simpleVariant("Upper", [
                          param[0],
                          param[1]
                        ]);
              }), partial_arg$1, param);
}

var Upper = {
  toString: toString$2,
  decode: decode$2
};

function toString$3(param) {
  return param[0];
}

var partial_arg$2 = Base$GclAtom.Loc.decode;

function partial_arg$3(param) {
  return Json_decode.pair(Json_decode.string, partial_arg$2, param);
}

function decode$3(param) {
  return Json_decode.map((function (param) {
                return /* Lower */Caml_chrome_debugger.simpleVariant("Lower", [
                          param[0],
                          param[1]
                        ]);
              }), partial_arg$3, param);
}

var Lower = {
  toString: toString$3,
  decode: decode$3
};

function locOf(param) {
  switch (param.tag | 0) {
    case /* App */4 :
        return param[2];
    case /* Quant */5 :
        return param[4];
    case /* Hole */6 :
        return param[0];
    default:
      return param[1];
  }
}

function negate(x) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* Op */Caml_chrome_debugger.variant("Op", 3, [
                /* Neg */9,
                /* NoLoc */0
              ]),
            x,
            /* NoLoc */0
          ]);
}

function disj(x, y) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* App */Caml_chrome_debugger.variant("App", 4, [
                /* Op */Caml_chrome_debugger.variant("Op", 3, [
                    /* Disj */8,
                    /* NoLoc */0
                  ]),
                x,
                /* NoLoc */0
              ]),
            y,
            /* NoLoc */0
          ]);
}

function conj(x, y) {
  return /* App */Caml_chrome_debugger.variant("App", 4, [
            /* App */Caml_chrome_debugger.variant("App", 4, [
                /* Op */Caml_chrome_debugger.variant("Op", 3, [
                    /* Conj */7,
                    /* NoLoc */0
                  ]),
                x,
                /* NoLoc */0
              ]),
            y,
            /* NoLoc */0
          ]);
}

function disjunct$prime(param) {
  if (param) {
    var xs = param[1];
    var x = param[0];
    if (xs) {
      return disj(x, disjunct$prime(xs));
    } else {
      return x;
    }
  } else {
    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
              /* Bool */Caml_chrome_debugger.variant("Bool", 1, [true]),
              /* NoLoc */0
            ]);
  }
}

function conjunct$prime(param) {
  if (param) {
    var xs = param[1];
    var x = param[0];
    if (xs) {
      return conj(x, conjunct$prime(xs));
    } else {
      return x;
    }
  } else {
    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
              /* Bool */Caml_chrome_debugger.variant("Bool", 1, [false]),
              /* NoLoc */0
            ]);
  }
}

var disjunct = Curry._2(Rebase.Fn.$great$great, Rebase.List.fromArray, disjunct$prime);

var conjunct = Curry._2(Rebase.Fn.$great$great, Rebase.List.fromArray, conjunct$prime);

function decode$4(json) {
  return Util$GclAtom.Decode.sum((function (tag) {
                  switch (tag) {
                    case "App" :
                        var partial_arg = Base$GclAtom.Loc.decode;
                        var partial_arg$1 = function (param) {
                          return Json_decode.tuple3(decode$4, decode$4, partial_arg, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* App */Caml_chrome_debugger.variant("App", 4, [
                                                              param[0],
                                                              param[1],
                                                              param[2]
                                                            ]);
                                                  }), partial_arg$1, param);
                                    })]);
                    case "Const" :
                        var partial_arg$2 = Base$GclAtom.Loc.decode;
                        var partial_arg$3 = function (param) {
                          return Json_decode.pair(decode$2, partial_arg$2, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Const */Caml_chrome_debugger.variant("Const", 1, [
                                                              toString$2(param[0]),
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$3, param);
                                    })]);
                    case "Hole" :
                        var partial_arg$4 = Base$GclAtom.Loc.decode;
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (r) {
                                                    return /* Hole */Caml_chrome_debugger.variant("Hole", 6, [r]);
                                                  }), partial_arg$4, param);
                                    })]);
                    case "Lit" :
                        var partial_arg$5 = Base$GclAtom.Loc.decode;
                        var partial_arg$6 = function (param) {
                          return Json_decode.pair(decode, partial_arg$5, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Lit */Caml_chrome_debugger.variant("Lit", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$6, param);
                                    })]);
                    case "Op" :
                        var partial_arg$7 = Base$GclAtom.Loc.decode;
                        var partial_arg$8 = function (param) {
                          return Json_decode.pair(decode$1, partial_arg$7, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Op */Caml_chrome_debugger.variant("Op", 3, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$8, param);
                                    })]);
                    case "Quant" :
                        var partial_arg$9 = Base$GclAtom.Loc.decode;
                        var partial_arg$10 = Util$GclAtom.Decode.tuple5;
                        var partial_arg$11 = function (param) {
                          return partial_arg$10(decode$4, (function (param) {
                                        return Json_decode.array(decode$3, param);
                                      }), decode$4, decode$4, partial_arg$9, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Quant */Caml_chrome_debugger.variant("Quant", 5, [
                                                              param[0],
                                                              param[1],
                                                              param[2],
                                                              param[3],
                                                              param[4]
                                                            ]);
                                                  }), partial_arg$11, param);
                                    })]);
                    case "Var" :
                        var partial_arg$12 = Base$GclAtom.Loc.decode;
                        var partial_arg$13 = function (param) {
                          return Json_decode.pair(decode$3, partial_arg$12, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 0, [
                                                              toString$3(param[0]),
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$13, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function decodeSubst(json) {
  return Json_decode.dict(decode$4, json);
}

function classify(param) {
  switch (param) {
    case /* EQ */0 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [5]);
    case /* NEQ */1 :
    case /* LTE */2 :
    case /* GTE */3 :
    case /* LT */4 :
    case /* GT */5 :
        return /* Infix */Caml_chrome_debugger.variant("Infix", 2, [6]);
    case /* Implies */6 :
        return /* InfixR */Caml_chrome_debugger.variant("InfixR", 1, [1]);
    case /* Conj */7 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [3]);
    case /* Disj */8 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [2]);
    case /* Neg */9 :
        return /* Prefix */Caml_chrome_debugger.variant("Prefix", 3, [4]);
    case /* Add */10 :
    case /* Sub */11 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [7]);
    case /* Mul */12 :
    case /* Div */13 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [8]);
    case /* Mod */14 :
        return /* InfixL */Caml_chrome_debugger.variant("InfixL", 0, [9]);
    
  }
}

function parensIf(p, s) {
  if (p) {
    return "(" + (s + ")");
  } else {
    return s;
  }
}

function handleOperator(n, op) {
  var match = classify(op);
  switch (match.tag | 0) {
    case /* InfixL */0 :
        var m = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m, toString$4(m, p) + (" " + (toString$1(op) + (" " + toString$4(m + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* InfixR */1 :
        var m$1 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$1, toString$4(m$1 + 1 | 0, p) + (" " + (toString$1(op) + (" " + toString$4(m$1, q)))))]);
                                  }));
                    }));
    case /* Infix */2 :
        var m$2 = match[0];
        return flatMap($$var, (function (p) {
                      return flatMap($$var, (function (q) {
                                    return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$2, toString$4(m$2 + 1 | 0, p) + (" " + (toString$1(op) + (" " + toString$4(m$2 + 1 | 0, q)))))]);
                                  }));
                    }));
    case /* Prefix */3 :
        var m$3 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$3, toString$1(op) + (" " + toString$4(m$3, p)))]);
                    }));
    case /* Postfix */4 :
        var m$4 = match[0];
        return flatMap($$var, (function (p) {
                      return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [parensIf(n > m$4, toString$4(m$4, p) + (" " + toString$1(op)))]);
                    }));
    
  }
}

function handleExpr(n, param) {
  switch (param.tag | 0) {
    case /* Var */0 :
    case /* Const */1 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [param[0]]);
    case /* Lit */2 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [toString(param[0])]);
    case /* Op */3 :
        return handleOperator(n, param[0]);
    case /* App */4 :
        var q = param[1];
        var match = handleExpr(n, param[0]);
        if (match.tag) {
          var s = match[0];
          var match$1 = handleExpr(n, q);
          if (match$1.tag) {
            var t = match$1[0];
            if (q.tag === /* App */4) {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + parensIf(true, t))]);
            } else {
              return /* Complete */Caml_chrome_debugger.variant("Complete", 1, [s + (" " + t)]);
            }
          } else {
            return /* Expect */Caml_chrome_debugger.variant("Expect", 0, [match$1[0]]);
          }
        } else {
          return Curry._1(match[0], q);
        }
    case /* Quant */5 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, ["< " + (toString$4(0, param[0]) + (" " + (Caml_splice_call.spliceObjApply(" ", "concat", [Rebase.$$Array.map(toString$3, param[1])]) + (" : " + (toString$4(0, param[2]) + (" : " + (toString$4(0, param[3]) + " >")))))))]);
    case /* Hole */6 :
        return /* Complete */Caml_chrome_debugger.variant("Complete", 1, ["[?]"]);
    
  }
}

function toString$4(n, p) {
  var match = handleExpr(n, p);
  if (match.tag) {
    return match[0];
  } else {
    return "";
  }
}

var Precedence = {
  classify: classify,
  parensIf: parensIf,
  handleOperator: handleOperator,
  handleExpr: handleExpr,
  toString: toString$4
};

function toString$5(param) {
  return toString$4(0, param);
}

var Expr = {
  locOf: locOf,
  negate: negate,
  disj: disj,
  conj: conj,
  disjunct$prime: disjunct$prime,
  conjunct$prime: conjunct$prime,
  disjunct: disjunct,
  conjunct: conjunct,
  decode: decode$4,
  decodeSubst: decodeSubst,
  Precedence: Precedence,
  toString: toString$5
};

function decode$5(json) {
  return Util$GclAtom.Decode.sum((function (tag) {
                  switch (tag) {
                    case "Assertion" :
                        var partial_arg = Base$GclAtom.Loc.decode;
                        var partial_arg$1 = function (param) {
                          return Json_decode.pair(decode$4, partial_arg, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Assertion */Caml_chrome_debugger.variant("Assertion", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$1, param);
                                    })]);
                    case "Bound" :
                        var partial_arg$2 = Base$GclAtom.Loc.decode;
                        var partial_arg$3 = function (param) {
                          return Json_decode.pair(decode$4, partial_arg$2, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Bound */Caml_chrome_debugger.variant("Bound", 1, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$3, param);
                                    })]);
                    case "Conjunct" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (xs) {
                                                    return /* Conjunct */Caml_chrome_debugger.variant("Conjunct", 6, [xs]);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$5, param);
                                                  }), param);
                                    })]);
                    case "Constant" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Constant */Caml_chrome_debugger.variant("Constant", 0, [x]);
                                                  }), decode$4, param);
                                    })]);
                    case "Disjunct" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (xs) {
                                                    return /* Disjunct */Caml_chrome_debugger.variant("Disjunct", 7, [xs]);
                                                  }), (function (param) {
                                                    return Json_decode.array(decode$5, param);
                                                  }), param);
                                    })]);
                    case "GuardIf" :
                        var partial_arg$4 = Base$GclAtom.Loc.decode;
                        var partial_arg$5 = function (param) {
                          return Json_decode.pair(decode$4, partial_arg$4, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* GuardIf */Caml_chrome_debugger.variant("GuardIf", 4, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$5, param);
                                    })]);
                    case "GuardLoop" :
                        var partial_arg$6 = Base$GclAtom.Loc.decode;
                        var partial_arg$7 = function (param) {
                          return Json_decode.pair(decode$4, partial_arg$6, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* GuardLoop */Caml_chrome_debugger.variant("GuardLoop", 5, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), partial_arg$7, param);
                                    })]);
                    case "LoopInvariant" :
                        var partial_arg$8 = Base$GclAtom.Loc.decode;
                        var partial_arg$9 = function (param) {
                          return Json_decode.tuple3(decode$4, decode$4, partial_arg$8, param);
                        };
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* LoopInvariant */Caml_chrome_debugger.variant("LoopInvariant", 3, [
                                                              param[0],
                                                              param[1],
                                                              param[2]
                                                            ]);
                                                  }), partial_arg$9, param);
                                    })]);
                    case "Negate" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Negate */Caml_chrome_debugger.variant("Negate", 8, [x]);
                                                  }), decode$5, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

function toExpr(param) {
  switch (param.tag | 0) {
    case /* Conjunct */6 :
        return Curry._1(conjunct, Rebase.$$Array.map(toExpr, param[0]));
    case /* Disjunct */7 :
        return Curry._1(disjunct, Rebase.$$Array.map(toExpr, param[0]));
    case /* Negate */8 :
        return negate(toExpr(param[0]));
    default:
      return param[0];
  }
}

var toString$6 = Curry._2(Rebase.Fn.$great$great, toExpr, toString$5);

var Pred = {
  decode: decode$5,
  toExpr: toExpr,
  toString: toString$6
};

function toString$7(param) {
  if (param) {
    return "Bool";
  } else {
    return "Int";
  }
}

function decode$6(param) {
  return Json_decode.map((function (tag) {
                switch (tag) {
                  case "TBool" :
                      return /* Bool */1;
                  case "TInt" :
                      return /* Int */0;
                  default:
                    throw [
                          Json_decode.DecodeError,
                          "Unknown constructor: " + tag
                        ];
                }
              }), Json_decode.string, param);
}

var Base = {
  toString: toString$7,
  decode: decode$6
};

function toString$8(param) {
  switch (param.tag | 0) {
    case /* Base */0 :
        if (param[0]) {
          return "Bool";
        } else {
          return "Int";
        }
    case /* Array */1 :
        return "Array " + toString$8(param[0]);
    case /* Func */2 :
        return toString$8(param[0]) + (" -> " + toString$8(param[1]));
    case /* Var */3 :
        return "Var " + String(param[0]);
    
  }
}

function decode$7(json) {
  return Util$GclAtom.Decode.sum((function (tag) {
                  switch (tag) {
                    case "TArray" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Array */Caml_chrome_debugger.variant("Array", 1, [x]);
                                                  }), decode$7, param);
                                    })]);
                    case "TBase" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Base */Caml_chrome_debugger.variant("Base", 0, [x]);
                                                  }), decode$6, param);
                                    })]);
                    case "TFun" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (param) {
                                                    return /* Func */Caml_chrome_debugger.variant("Func", 2, [
                                                              param[0],
                                                              param[1]
                                                            ]);
                                                  }), (function (param) {
                                                    return Json_decode.pair(decode$7, decode$7, param);
                                                  }), param);
                                    })]);
                    case "TVar" :
                        return /* Contents */Caml_chrome_debugger.variant("Contents", 0, [(function (param) {
                                      return Json_decode.map((function (x) {
                                                    return /* Var */Caml_chrome_debugger.variant("Var", 3, [x]);
                                                  }), Json_decode.$$int, param);
                                    })]);
                    default:
                      throw [
                            Json_decode.DecodeError,
                            "Unknown constructor: " + tag
                          ];
                  }
                }))(json);
}

var Type = {
  Base: Base,
  toString: toString$8,
  decode: decode$7
};

exports.VarArg = VarArg;
exports.Lit = Lit;
exports.Op = Op;
exports.Upper = Upper;
exports.Lower = Lower;
exports.Expr = Expr;
exports.Pred = Pred;
exports.Type = Type;
/* disjunct Not a pure module */
