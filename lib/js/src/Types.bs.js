// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function request(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Debug"
                  ],
                  /* [] */0
                ]));
  } else {
    switch (param.tag | 0) {
      case /* Load */0 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Load"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* Load2 */1 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Load2"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* Refine */2 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Refine"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              Json_encode.pair((function (prim) {
                                      return prim;
                                    }), (function (prim) {
                                      return prim;
                                    }), /* tuple */[
                                    param[0],
                                    param[1]
                                  ])
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* InsertAssertion */3 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "InsertAssertion"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      
    }
  }
}

var Encode = {
  request: request
};

function encode(x) {
  return Json.stringify(request(x));
}

var $$Request = {
  Encode: Encode,
  encode: encode
};

var names = [
  "toggle",
  "load",
  "refine",
  "insert-assertion",
  "debug"
];

function parse(param) {
  switch (param) {
    case "debug" :
        return /* Debug */4;
    case "insert-assertion" :
        return /* InsertAssertion */3;
    case "load" :
        return /* Save */1;
    case "refine" :
        return /* Refine */2;
    case "toggle" :
        return /* Toggle */0;
    default:
      return /* Save */1;
  }
}

var Command = {
  names: names,
  parse: parse
};

exports.$$Request = $$Request;
exports.Command = Command;
/* No side effect */
