// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Event$GclAtom = require("./Util/Event.bs.js");
var Channel$GclAtom = require("./Util/Channel.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function make(param) {
  return {
          updateConnection: Channel$GclAtom.make(/* () */0),
          setActivation: Channel$GclAtom.make(/* () */0),
          setHeader: Channel$GclAtom.make(/* () */0),
          setBody: Channel$GclAtom.make(/* () */0)
        };
}

var Channels = {
  make: make
};

function make$1(param) {
  return {
          onSetMode: Event$GclAtom.make(/* () */0),
          onLink: Event$GclAtom.make(/* () */0)
        };
}

var Events = {
  make: make$1
};

function make$2(editor, element, channels, events) {
  var partial_arg = channels.setActivation;
  var partial_arg$1 = channels.setHeader;
  var partial_arg$2 = channels.setBody;
  return {
          editor: editor,
          element: element,
          subscriptions: [],
          setActivation: (function (param) {
              return Channel$GclAtom.sendTo(partial_arg, param);
            }),
          setHeader: (function (param) {
              return Channel$GclAtom.sendTo(partial_arg$1, param);
            }),
          setBody: (function (param) {
              return Channel$GclAtom.sendTo(partial_arg$2, param);
            }),
          onSetMode: events.onSetMode,
          onLink: events.onLink
        };
}

function destroy(self) {
  return Belt_Array.forEach(self.subscriptions, (function (destructor) {
                return Curry._1(destructor, /* () */0);
              }));
}

function send(self, param) {
  if (typeof param === "number") {
    if (param !== 0) {
      Curry._1(self.setActivation, false);
      return /* () */0;
    } else {
      Curry._1(self.setActivation, true);
      return /* () */0;
    }
  } else {
    Curry._1(self.setHeader, param[0]);
    Curry._1(self.setBody, param[1]);
    return /* () */0;
  }
}

function recv(self, callback) {
  self.subscriptions.push(Curry._1(self.onSetMode.on, (function (x) {
              return Curry._1(callback, /* SetMode */Caml_chrome_debugger.variant("SetMode", 0, [x]));
            })));
  self.subscriptions.push(Curry._1(self.onLink.on, (function (x) {
              return Curry._1(callback, /* Link */Caml_chrome_debugger.variant("Link", 1, [x]));
            })));
  return /* () */0;
}

var View = {
  Channels: Channels,
  Events: Events,
  make: make$2,
  destroy: destroy,
  send: send,
  recv: recv
};

function request(param) {
  if (typeof param === "number") {
    return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* tuple */[
                    "tag",
                    "Debug"
                  ],
                  /* [] */0
                ]));
  } else {
    switch (param.tag | 0) {
      case /* Load */0 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Load"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* Load2 */1 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Load2"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* Refine */2 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "Refine"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              Json_encode.pair((function (prim) {
                                      return prim;
                                    }), (function (prim) {
                                      return prim;
                                    }), /* tuple */[
                                    param[0],
                                    param[1]
                                  ])
                            ],
                            /* [] */0
                          ])
                      ]));
      case /* InsertAssertion */3 :
          return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "tag",
                          "InsertAssertion"
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "contents",
                              param[0]
                            ],
                            /* [] */0
                          ])
                      ]));
      
    }
  }
}

var Encode = {
  request: request
};

function encode(x) {
  return Json.stringify(request(x));
}

var $$Request = {
  Encode: Encode,
  encode: encode
};

var names = [
  "toggle",
  "load",
  "refine",
  "insert-assertion",
  "debug"
];

function parse(param) {
  switch (param) {
    case "debug" :
        return /* Debug */4;
    case "insert-assertion" :
        return /* InsertAssertion */3;
    case "load" :
        return /* Save */1;
    case "refine" :
        return /* Refine */2;
    case "toggle" :
        return /* Toggle */0;
    default:
      return /* Save */1;
  }
}

var Command = {
  names: names,
  parse: parse
};

exports.View = View;
exports.$$Request = $$Request;
exports.Command = Command;
/* Event-GclAtom Not a pure module */
