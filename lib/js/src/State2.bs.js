// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Ok$GclAtom = require("./Util/Ok.bs.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var GCL$Guacamole = require("guacamole/lib/js/src/GCL.bs.js");
var Sig$Guacamole = require("guacamole/lib/js/src/Implementation/Sig.bs.js");
var Request$Guacamole = require("guacamole/lib/js/src/Request.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");
var Connection$Guacamole = require("guacamole/lib/js/src/Connection.bs.js");

function Impl(Editor) {
  var getEditor = function (state) {
    return state.editor;
  };
  var setSpecifications = function (state, specifications) {
    state.specifications = specifications;
    return /* () */0;
  };
  var connect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [match]));
    } else {
      return $$Promise.tapOk($$Promise.mapError(Connection$Guacamole.make(Editor.Config.getGCLPath, Editor.Config.setGCLPath), (function (e) {
                        return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                      })), (function (conn) {
                    state.connection = conn;
                    return /* () */0;
                  }));
    }
  };
  var disconnect = function (state) {
    var match = state.connection;
    if (match !== undefined) {
      return Connection$Guacamole.disconnect(match);
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  var sendRequest = function (state, request) {
    var value = Request$Guacamole.encode(request);
    console.log("<<<", value);
    return Ok$GclAtom.let_(connect(state), (function (conn) {
                  return Ok$GclAtom.let_($$Promise.mapError(Connection$Guacamole.send(value, conn), (function (e) {
                                    return /* Connection */Caml_chrome_debugger.variant("Connection", 0, [e]);
                                  })), (function (result) {
                                console.log(">>>", result);
                                var value;
                                try {
                                  value = Curry._1(GCL$Guacamole.$$Response.decode, result);
                                }
                                catch (raw_exn){
                                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                  if (exn[0] === Json_decode.DecodeError) {
                                    return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* Decode */Caml_chrome_debugger.variant("Decode", 1, [
                                                      exn[1],
                                                      result
                                                    ])]));
                                  } else {
                                    throw exn;
                                  }
                                }
                                return $$Promise.resolved(/* Ok */Caml_chrome_debugger.variant("Ok", 0, [value]));
                              }));
                }));
  };
  var make = function (context, editor) {
    var view = Curry._2(Editor.View.make, context, editor);
    var state = {
      editor: editor,
      view: view,
      mode: /* WP1 */0,
      specifications: [],
      connection: undefined
    };
    Curry._2(Editor.addToSubscriptions, Curry._2(Editor.View.recv, view, (function (param) {
                if (param.tag) {
                  console.log("[ view ][ recv ][ link ]", param[0]);
                  return /* () */0;
                } else if (param[0]) {
                  state.mode = /* WP2 */1;
                  return /* () */0;
                } else {
                  state.mode = /* WP1 */0;
                  return /* () */0;
                }
              })), context);
    $$Promise.get(connect(state), (function (param) {
            if (param.tag) {
              console.log("[ connection error ]", Sig$Guacamole.$$Error.toString(param[0]));
              return /* () */0;
            } else {
              console.log("[ connection success ]", param[0]);
              return /* () */0;
            }
          }));
    return state;
  };
  var destroy = function (state) {
    Curry._1(Editor.View.destroy, state.view);
    return disconnect(state);
  };
  var show = function (state) {
    return Curry._1(Editor.View.show, state.view);
  };
  var hide = function (state) {
    return Curry._1(Editor.View.hide, state.view);
  };
  var display = function (state, header, body) {
    return Curry._2(Editor.View.send, state.view, /* Display */Caml_chrome_debugger.simpleVariant("Display", [
                  header,
                  body
                ]));
  };
  return {
          getEditor: getEditor,
          setSpecifications: setSpecifications,
          make: make,
          destroy: destroy,
          connect: connect,
          disconnect: disconnect,
          sendRequest: sendRequest,
          show: show,
          hide: hide,
          display: display
        };
}

exports.Impl = Impl;
/* Promise Not a pure module */
