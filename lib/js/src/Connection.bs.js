// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/lib/js/src/Json.bs.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Event$GclAtom = require("./Util/Event.bs.js");
var Process$AgdaMode = require("agda-mode/lib/js/src/Process.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function toString(param) {
  switch (param.tag | 0) {
    case /* PathSearch */0 :
        return Curry._1(Process$AgdaMode.PathSearch.$$Error.toString, param[0]);
    case /* Validation */1 :
        return Curry._1(Process$AgdaMode.Validation.$$Error.toString, param[0]);
    case /* Process */2 :
        return Process$AgdaMode.$$Error.toString(param[0]);
    
  }
}

var $$Error = {
  toString: toString
};

function isConnected(connection) {
  return Curry._1(connection[/* process */1][/* isConnected */3], /* () */0);
}

function disconnect(connection) {
  return Curry._1(connection[/* process */1][/* disconnect */2], /* () */0);
}

function wire(connection) {
  var unfinishedMsg = /* record */Caml_chrome_debugger.record(["contents"], [undefined]);
  Curry._1(connection[/* process */1][/* emitter */1][/* on */3], (function (param) {
          if (param.tag) {
            return Curry._1(connection[/* emitter */2][/* emit */1], /* Error */Caml_chrome_debugger.variant("Error", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [param[0]])]));
          } else {
            var data = param[0];
            var match = unfinishedMsg[0];
            var augmented = match !== undefined ? match + data : data;
            var match$1 = Json.parse(augmented);
            if (match$1 !== undefined) {
              unfinishedMsg[0] = undefined;
              Curry._1(connection[/* emitter */2][/* emit */1], /* Ok */Caml_chrome_debugger.variant("Ok", 0, [Caml_option.valFromOption(match$1)]));
              return /* () */0;
            } else {
              unfinishedMsg[0] = augmented;
              return /* () */0;
            }
          }
        }));
  return /* () */0;
}

function make(param) {
  return $$Promise.tapOk($$Promise.mapOk($$Promise.map(Process$AgdaMode.PathSearch.run("gcl"), (function (param) {
                        if (param.tag) {
                          return /* Error */Caml_chrome_debugger.variant("Error", 1, [/* PathSearch */Caml_chrome_debugger.variant("PathSearch", 0, [param[0]])]);
                        } else {
                          return /* Ok */Caml_chrome_debugger.variant("Ok", 0, [param[0]]);
                        }
                      })), (function (path) {
                    var $$process = Process$AgdaMode.make(path, /* array */[]);
                    return /* record */Caml_chrome_debugger.record([
                              "path",
                              "process",
                              "emitter"
                            ], [
                              path,
                              $$process,
                              Event$GclAtom.make(/* () */0)
                            ]);
                  })), wire);
}

function send(request, connection) {
  var promise = Curry._1(connection[/* emitter */2][/* once */2], /* () */0);
  var result = Curry._1(connection[/* process */1][/* send */0], request);
  if (result.tag) {
    return $$Promise.resolved(/* Error */Caml_chrome_debugger.variant("Error", 1, [/* Process */Caml_chrome_debugger.variant("Process", 2, [result[0]])]));
  } else {
    return promise;
  }
}

var Process = 0;

exports.Process = Process;
exports.$$Error = $$Error;
exports.isConnected = isConnected;
exports.disconnect = disconnect;
exports.wire = wire;
exports.make = make;
exports.send = send;
/* Promise Not a pure module */
