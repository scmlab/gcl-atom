// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Async$GclAtom = require("./Util/Async.bs.js");
var Handler$GclAtom = require("./Handler.bs.js");
var Connection$GclAtom = require("./Connection.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var commandNames = /* array */[
  "toggle",
  "save",
  "refine"
];

function parse(param) {
  switch (param) {
    case "refine" :
        return /* Refine */2;
    case "save" :
        return /* Save */1;
    case "toggle" :
        return /* Toggle */0;
    default:
      return /* Save */1;
  }
}

function dispatch(param) {
  switch (param) {
    case /* Toggle */0 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          if (instance[/* toggle */2]) {
                            return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* Dispatch */Caml_chrome_debugger.variant("Dispatch", 1, [/* Activate */0]),
                                          /* [] */0
                                        ]));
                          } else {
                            return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                          /* Dispatch */Caml_chrome_debugger.variant("Dispatch", 1, [/* Deactivate */1]),
                                          /* [] */0
                                        ]));
                          }
                        })]),
                  /* [] */0
                ]);
    case /* Save */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Rebase.$$Array.forEach((function (prim) {
                                  prim.destroy();
                                  return /* () */0;
                                }), instance[/* decorations */4]);
                          return Async$GclAtom.thenOk((function (param) {
                                          var filepath = instance[/* editor */0].getPath();
                                          if (filepath !== undefined) {
                                            return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* Dispatch */Caml_chrome_debugger.variant("Dispatch", 1, [/* Update */Caml_chrome_debugger.variant("Update", 0, [filepath])]),
                                                          /* [] */0
                                                        ]));
                                          } else {
                                            return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                                              /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read filepath"]),
                                                              /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please save the file first"])
                                                            ]),
                                                          /* [] */0
                                                        ]));
                                          }
                                        }))(Async$GclAtom.mapError((function (param) {
                                              return /* () */0;
                                            }))(Async$GclAtom.fromPromise(instance[/* editor */0].save())));
                        })]),
                  /* [] */0
                ]);
    case /* Refine */2 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          return Rebase.$$Option.mapOr((function (spec) {
                                        return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* Dispatch */Caml_chrome_debugger.variant("Dispatch", 1, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [spec])]),
                                                      /* [] */0
                                                    ]));
                                      }), Async$GclAtom.resolve(/* [] */0), Handler$GclAtom.Spec.fromCursorPosition(instance));
                        })]),
                  /* [] */0
                ]);
    
  }
}

var Raw = {
  commandNames: commandNames,
  parse: parse,
  dispatch: dispatch
};

function dispatch$1(param) {
  if (typeof param === "number") {
    if (param === /* Activate */0) {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                        instance[/* toggle */2] = false;
                        Curry._1(instance[/* view */1][/* setActivation */0], false);
                        Rebase.$$Array.forEach((function (prim) {
                                prim.destroy();
                                return /* () */0;
                              }), instance[/* decorations */4]);
                        Connection$GclAtom.disconnect(instance[/* connection */3]);
                        return Async$GclAtom.resolve(/* [] */0);
                      })]),
                /* [] */0
              ]);
    } else {
      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                        instance[/* toggle */2] = true;
                        Curry._1(instance[/* view */1][/* setActivation */0], true);
                        if (Connection$GclAtom.isConnected(instance[/* connection */3])) {
                          return Async$GclAtom.resolve(/* [] */0);
                        } else {
                          return Async$GclAtom.then_((function (param) {
                                          return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* DispatchRaw */Caml_chrome_debugger.variant("DispatchRaw", 2, [/* Save */1]),
                                                        /* [] */0
                                                      ]));
                                        }), (function (error) {
                                          var match = Connection$GclAtom.$$Error.toString(error);
                                          return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* Display */Caml_chrome_debugger.variant("Display", 4, [
                                                            /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                                          ]),
                                                        /* [] */0
                                                      ]));
                                        }))(Connection$GclAtom.connect(instance[/* connection */3]));
                        }
                      })]),
                /* [] */0
              ]);
    }
  } else if (param.tag) {
    var spec = param[0];
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                      var payload = Handler$GclAtom.Spec.getPayload(spec, instance);
                      return Async$GclAtom.resolve(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 3, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [
                                            spec[/* id */0],
                                            payload
                                          ])]),
                                    /* [] */0
                                  ]));
                    })]),
              /* [] */0
            ]);
  } else {
    return /* :: */Caml_chrome_debugger.simpleVariant("::", [
              /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 3, [/* Load */Caml_chrome_debugger.variant("Load", 0, [param[0]])]),
              /* [] */0
            ]);
  }
}

var Elaborated = {
  dispatch: dispatch$1
};

exports.Raw = Raw;
exports.Elaborated = Elaborated;
/* Handler-GclAtom Not a pure module */
