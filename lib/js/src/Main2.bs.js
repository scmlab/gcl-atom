// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Atom = require("atom");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Main$Guacamole = require("guacamole/lib/js/src/Main.bs.js");
var State$Guacamole = require("guacamole/lib/js/src/State.bs.js");
var AtomImpl$GclAtom = require("./Editor/AtomImpl.bs.js");

var States = Main$Guacamole.StateDict.Impl({
      make: AtomImpl$GclAtom.make,
      getExtensionPath: AtomImpl$GclAtom.getExtensionPath,
      editorFileName: AtomImpl$GclAtom.editorFileName,
      onDidChangeFileName: AtomImpl$GclAtom.onDidChangeFileName,
      onDidChangeActivation: AtomImpl$GclAtom.onDidChangeActivation,
      onDidCloseEditor: AtomImpl$GclAtom.onDidCloseEditor,
      addToSubscriptions: AtomImpl$GclAtom.addToSubscriptions,
      registerCommand: AtomImpl$GclAtom.registerCommand,
      getGCLPath: AtomImpl$GclAtom.getGCLPath,
      setGCLPath: AtomImpl$GclAtom.setGCLPath
    });

var State = State$Guacamole.Impl({
      make: AtomImpl$GclAtom.make,
      getExtensionPath: AtomImpl$GclAtom.getExtensionPath,
      editorFileName: AtomImpl$GclAtom.editorFileName,
      onDidChangeFileName: AtomImpl$GclAtom.onDidChangeFileName,
      onDidChangeActivation: AtomImpl$GclAtom.onDidChangeActivation,
      onDidCloseEditor: AtomImpl$GclAtom.onDidCloseEditor,
      addToSubscriptions: AtomImpl$GclAtom.addToSubscriptions,
      registerCommand: AtomImpl$GclAtom.registerCommand,
      getGCLPath: AtomImpl$GclAtom.getGCLPath,
      setGCLPath: AtomImpl$GclAtom.setGCLPath
    });

function make(subscriptions) {
  var partial_arg = /\.gcl$/i;
  var isGCL = function (param) {
    return partial_arg.test(param);
  };
  AtomImpl$GclAtom.addToSubscriptions(AtomImpl$GclAtom.onDidCloseEditor(States.destroy), subscriptions);
  AtomImpl$GclAtom.addToSubscriptions(AtomImpl$GclAtom.onDidChangeFileName((function (oldName, newName) {
              return Belt_Option.forEach(oldName, (function (oldName) {
                            return Belt_Option.forEach(newName, (function (newName) {
                                          if (Curry._1(States.contains, oldName)) {
                                            if (Curry._1(isGCL, newName)) {
                                              return Curry._2(States.rename, oldName, newName);
                                            } else {
                                              return Curry._1(States.destroy, oldName);
                                            }
                                          } else {
                                            return 0;
                                          }
                                        }));
                          }));
            })), subscriptions);
  AtomImpl$GclAtom.addToSubscriptions(AtomImpl$GclAtom.onDidChangeActivation((function (_previous, next) {
              return Belt_Option.forEach(Belt_Option.flatMap(next, States.get), (function (param) {
                            console.log("[activate]", param);
                            return /* () */0;
                          }));
            })), subscriptions);
  return AtomImpl$GclAtom.addToSubscriptions(AtomImpl$GclAtom.registerCommand("load", (function (editor) {
                    var fileName = AtomImpl$GclAtom.editorFileName(editor);
                    if (Curry._1(isGCL, fileName)) {
                      var match = Curry._1(States.get, fileName);
                      if (match !== undefined) {
                        console.log("[ main ][ LOAD ]");
                        return /* () */0;
                      } else {
                        console.log("[ main ][ first LOAD ]");
                        var state = Curry._2(State.make, subscriptions, editor);
                        return Curry._2(States.add, fileName, state);
                      }
                    } else {
                      return 0;
                    }
                  })), subscriptions);
}

function destroy(param) {
  return Curry._1(States.destroyAll, /* () */0);
}

var activated = {
  contents: false
};

function activate(param) {
  if (!activated.contents) {
    activated.contents = true;
    make(new Atom.CompositeDisposable());
  }
  return Promise.resolve(/* () */0);
}

function deactivate(param) {
  if (activated.contents) {
    activated.contents = false;
    return Curry._1(States.destroyAll, /* () */0);
  } else {
    return 0;
  }
}

var config = {
  path: {
    title: "GCL path",
    description: "Path to the executable of GCL, automatically inferred when possible. Overwrite to override.",
    type: "string",
    default: "",
    order: 1
  }
};

var Editor = /* alias */0;

exports.States = States;
exports.State = State;
exports.Editor = Editor;
exports.make = make;
exports.destroy = destroy;
exports.activated = activated;
exports.activate = activate;
exports.deactivate = deactivate;
exports.config = config;
/* States Not a pure module */
