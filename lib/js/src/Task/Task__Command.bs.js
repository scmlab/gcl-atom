// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Base$GclAtom = require("../GCL/Base.bs.js");
var Spec$GclAtom = require("../Instance/Spec.bs.js");
var Instance$GclAtom = require("../Instance/Instance.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function dispatch(param) {
  switch (param) {
    case /* Toggle */0 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          if (instance[/* toggle */2]) {
                            instance[/* toggle */2] = false;
                            Curry._1(instance[/* view */1][/* setActivation */0], false);
                            Rebase.$$Array.forEach((function (prim) {
                                    prim.destroy();
                                    return /* () */0;
                                  }), instance[/* decorations */4]);
                            Instance$GclAtom.Connection_.destroy(instance);
                            return $$Promise.resolved(/* [] */0);
                          } else {
                            instance[/* toggle */2] = true;
                            Curry._1(instance[/* view */1][/* setActivation */0], true);
                            var match = instance[/* connection */3];
                            if (match !== undefined) {
                              return $$Promise.resolved(/* [] */0);
                            } else {
                              return $$Promise.map(Instance$GclAtom.Connection_.establish(instance), (function (param) {
                                            if (param.tag) {
                                              var match = Instance$GclAtom.$$Error.toString(param[0]);
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                                            /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                                          ]),
                                                        /* [] */0
                                                      ]);
                                            } else {
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                                                        /* [] */0
                                                      ]);
                                            }
                                          }));
                            }
                          }
                        })]),
                  /* [] */0
                ]);
    case /* Save */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                          Rebase.$$Array.forEach((function (prim) {
                                  prim.destroy();
                                  return /* () */0;
                                }), instance[/* decorations */4]);
                          return $$Promise.map($$Promise.Js.$$catch($$Promise.Js.fromBsPromise(instance[/* editor */0].save()), (function (param) {
                                            return $$Promise.resolved(/* () */0);
                                          })), (function (param) {
                                        var filepath = instance[/* editor */0].getPath();
                                        if (filepath !== undefined) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Load */Caml_chrome_debugger.variant("Load", 0, [filepath])]),
                                                    /* [] */0
                                                  ]);
                                        } else {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read filepath"]),
                                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please save the file first"])
                                                      ]),
                                                    /* [] */0
                                                  ]);
                                        }
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* Refine */2 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                              return Rebase.$$Option.mapOr((function (spec) {
                                            var payload = Spec$GclAtom.getPayload(spec, instance);
                                            return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [
                                                                  spec[/* id */0],
                                                                  payload
                                                                ])]),
                                                          /* [] */0
                                                        ]));
                                          }), $$Promise.resolved(/* [] */0), Spec$GclAtom.fromCursorPosition(instance));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* InsertAssertion */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithInstance */Caml_chrome_debugger.variant("WithInstance", 0, [(function (instance) {
                              var cursor = instance[/* editor */0].getCursorBufferPosition();
                              var match = Base$GclAtom.Pos.fromPoint("whatever", cursor);
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 2, [match[1]])]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* Debug */4 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Debug */0]),
                  /* [] */0
                ]);
    
  }
}

exports.dispatch = dispatch;
/* Promise Not a pure module */
