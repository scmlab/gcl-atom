// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Base$GclAtom = require("../GCL/Base.bs.js");
var Spec$GclAtom = require("../Editor/Spec.bs.js");
var State$GclAtom = require("../State.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function dispatch(param) {
  switch (param) {
    case /* Toggle */0 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          if (state.loaded) {
                            State$GclAtom.destroy(state);
                            return $$Promise.resolved(/* [] */0);
                          } else {
                            state.loaded = true;
                            Curry._1(state.view.setActivation, true);
                            var match = state.connection;
                            if (match !== undefined) {
                              return $$Promise.resolved(/* [] */0);
                            } else {
                              return $$Promise.map(State$GclAtom.establishConnection(state), (function (param) {
                                            if (param.tag) {
                                              var match = State$GclAtom.$$Error.toString(param[0]);
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                                            /* Error */Caml_chrome_debugger.variant("Error", 1, [match[0]]),
                                                            /* Plain */Caml_chrome_debugger.variant("Plain", 1, [match[1]])
                                                          ]),
                                                        /* [] */0
                                                      ]);
                                            } else {
                                              return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                                                        /* [] */0
                                                      ]);
                                            }
                                          }));
                            }
                          }
                        })]),
                  /* [] */0
                ]);
    case /* Save */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          Belt_Array.forEach(state.decorations, (function (prim) {
                                  prim.destroy();
                                  return /* () */0;
                                }));
                          return $$Promise.map($$Promise.Js.$$catch($$Promise.Js.fromBsPromise(state.editor.save()), (function (param) {
                                            return $$Promise.resolved(/* () */0);
                                          })), (function (param) {
                                        var filepath = state.editor.getPath();
                                        if (filepath !== undefined) {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Load */Caml_chrome_debugger.variant("Load", 0, [filepath])]),
                                                    /* [] */0
                                                  ]);
                                        } else {
                                          return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* Display */Caml_chrome_debugger.variant("Display", 5, [
                                                        /* Error */Caml_chrome_debugger.variant("Error", 1, ["Cannot read filepath"]),
                                                        /* Plain */Caml_chrome_debugger.variant("Plain", 1, ["Please save the file first"])
                                                      ]),
                                                    /* [] */0
                                                  ]);
                                        }
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* Refine */2 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              return Belt_Option.mapWithDefault(Spec$GclAtom.fromCursorPosition(state), $$Promise.resolved(/* [] */0), (function (spec) {
                                            var payload = Spec$GclAtom.getPayload(spec, state);
                                            return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                          /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Refine */Caml_chrome_debugger.variant("Refine", 1, [
                                                                  spec.id,
                                                                  payload
                                                                ])]),
                                                          /* [] */0
                                                        ]));
                                          }));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* InsertAssertion */3 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                              var cursor = state.editor.getCursorBufferPosition();
                              var match = Base$GclAtom.Pos.fromPoint("whatever", cursor);
                              return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* InsertAssertion */Caml_chrome_debugger.variant("InsertAssertion", 2, [match[1]])]),
                                            /* [] */0
                                          ]));
                            })]),
                      /* [] */0
                    ])
                ]);
    case /* Debug */4 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SendRequest */Caml_chrome_debugger.variant("SendRequest", 4, [/* Debug */0]),
                  /* [] */0
                ]);
    
  }
}

exports.dispatch = dispatch;
/* Promise Not a pure module */
