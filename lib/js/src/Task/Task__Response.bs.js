// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var Js_list = require("bs-platform/lib/js/js_list.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var P$GclAtom = require("../Util/P.bs.js");
var Spec$GclAtom = require("../Editor/Spec.bs.js");
var Decoration$GclAtom = require("../Editor/Decoration.bs.js");
var Task__Error$GclAtom = require("./Task__Error.bs.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

function handle(response) {
  switch (response.tag | 0) {
    case /* Error */0 :
        return Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(Task__Error$GclAtom.handle, response[0])));
    case /* OK */1 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* SetSpecifications */Caml_chrome_debugger.variant("SetSpecifications", 1, [response[1]]),
                  /* :: */Caml_chrome_debugger.simpleVariant("::", [
                      /* AddDecorations */Caml_chrome_debugger.variant("AddDecorations", 2, [(function (specifications, editor) {
                              return Rebase.$$Array.fromList(Js_list.flatten(Rebase.List.fromArray(Rebase.$$Array.map(Rebase.List.fromArray, Rebase.$$Array.map(Curry._2(Rebase.Fn.flip, Decoration$GclAtom.markSpec, editor), specifications)))));
                            })]),
                      /* :: */Caml_chrome_debugger.simpleVariant("::", [
                          /* Display */Caml_chrome_debugger.variant("Display", 5, [
                              /* Plain */Caml_chrome_debugger.variant("Plain", 0, ["Proof Obligations"]),
                              /* ProofObligations */Caml_chrome_debugger.variant("ProofObligations", 0, [response[0]])
                            ]),
                          /* [] */0
                        ])
                    ])
                ]);
    case /* Resolve */2 :
        var i = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          return P$GclAtom.let_(Spec$GclAtom.resolve(i, state), (function (param) {
                                        return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                      /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                                                      /* [] */0
                                                    ]));
                                      }));
                        })]),
                  /* [] */0
                ]);
    case /* InsertAssertion */3 :
        var expr = response[1];
        var i$1 = response[0];
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* WithState */Caml_chrome_debugger.variant("WithState", 0, [(function (state) {
                          Spec$GclAtom.insert(i$1, expr, state);
                          return $$Promise.resolved(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* DispatchCommand */Caml_chrome_debugger.variant("DispatchCommand", 3, [/* Save */1]),
                                        /* [] */0
                                      ]));
                        })]),
                  /* [] */0
                ]);
    case /* UnknownResponse */4 :
        return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                  /* Display */Caml_chrome_debugger.variant("Display", 5, [
                      /* Error */Caml_chrome_debugger.variant("Error", 1, ["Panic: unknown response from GCL"]),
                      /* Plain */Caml_chrome_debugger.variant("Plain", 1, [JSON.stringify(response[0])])
                    ]),
                  /* [] */0
                ]);
    
  }
}

exports.handle = handle;
/* Promise Not a pure module */
