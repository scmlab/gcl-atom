// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Rebase = require("@glennsl/rebase/lib/js/src/Rebase.bs.js");
var $$Promise = require("reason-promise/lib/js/src/js/promise.js");
var P$GclAtom = require("../Util/P.bs.js");
var Instance$GclAtom = require("../Instance/Instance.bs.js");
var Task__Command$GclAtom = require("./Task__Command.bs.js");
var Task__Response$GclAtom = require("./Task__Response.bs.js");

function run(instance, tasks) {
  var runTask = function (task) {
    switch (task.tag | 0) {
      case /* WithInstance */0 :
          return $$Promise.flatMap(Curry._1(task[0], instance), (function (param) {
                        return run(instance, param);
                      }));
      case /* SetSpecifications */1 :
          console.log("[ set specifications ]");
          instance[/* specifications */5] = task[0];
          return $$Promise.resolved(/* () */0);
      case /* AddDecorations */2 :
          console.log("[ add decorations ]");
          instance[/* decorations */4] = Rebase.$$Array.concat(Curry._2(task[0], instance[/* specifications */5], instance[/* editor */0]), instance[/* decorations */4]);
          return $$Promise.resolved(/* () */0);
      case /* DispatchCommand */3 :
          var command = task[0];
          console.log("[ dispatch command ]", command);
          return run(instance, Task__Command$GclAtom.dispatch(command));
      case /* SendRequest */4 :
          console.log("[ send request ]");
          return $$Promise.flatMap(Instance$GclAtom.Connection_.sendRequest(task[0], instance), (function (param) {
                        if (param.tag) {
                          var match = Instance$GclAtom.$$Error.toString(param[0]);
                          Instance$GclAtom.View.displayError(match[0], match[1], instance);
                          return $$Promise.resolved(/* () */0);
                        } else {
                          return run(instance, Task__Response$GclAtom.handle(param[0]));
                        }
                      }));
      case /* Display */5 :
          Curry._1(instance[/* view */1][/* setHeader */1], task[0]);
          Curry._1(instance[/* view */1][/* setBody */2], task[1]);
          return $$Promise.resolved(/* () */0);
      
    }
  };
  var runEach = function (param) {
    if (param) {
      var xs = param[1];
      return P$GclAtom.let_(runTask(param[0]), (function (param) {
                    return P$GclAtom.let_(runEach(xs), (function (param) {
                                  return $$Promise.resolved(/* () */0);
                                }));
                  }));
    } else {
      return $$Promise.resolved(/* () */0);
    }
  };
  return runEach(tasks);
}

exports.run = run;
/* Promise Not a pure module */
